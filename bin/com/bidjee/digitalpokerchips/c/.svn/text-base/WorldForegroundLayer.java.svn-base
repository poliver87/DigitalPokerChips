package com.bidjee.digitalpokerchips.c;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.input.GestureDetector;
import com.badlogic.gdx.math.Vector2;
import com.bidjee.digitalpokerchips.m.Button;
import com.bidjee.digitalpokerchips.m.BuyinDialog;
import com.bidjee.digitalpokerchips.m.ChipCase;
import com.bidjee.digitalpokerchips.m.ClosedDialog;
import com.bidjee.digitalpokerchips.m.DPCSprite;
import com.bidjee.digitalpokerchips.m.DialogWindow;
import com.bidjee.digitalpokerchips.m.Player;
import com.bidjee.digitalpokerchips.m.SearchingAnimation;
import com.bidjee.digitalpokerchips.m.TableStatusMenu;
import com.bidjee.digitalpokerchips.m.TextLabel;
import com.bidjee.digitalpokerchips.v.ForegroundRenderer;

public class ForegroundLayer {
	
	static final int STATE_NONE = 0;
	static final int STATE_HOME = 1;
	
	static final String WIN_TEXT = " Wins Dealer!";
	// State Variables //
	boolean screenLaidOut;
	boolean wifiEnabled;
	int animationState;
	boolean helpOpen;
	boolean runTutorialArrangement;
	boolean openHelpOnStartup;
	boolean showPlayerPrompt;
	// Layout and Scale //
	public float screenWidth;
	public float screenHeight;
	float oldScreenWidth;
	float oldScreenHeight;
	
	float limFlingVelocity;
	
	Vector2 posLogoDPCStart=new Vector2();
	Vector2 posLogoDPCStop=new Vector2();
	Vector2 posCreateButtonStart=new Vector2();
	Vector2 posCreateButtonStop=new Vector2();
	Vector2 posJoinButtonStart=new Vector2();
	Vector2 posJoinButtonStop=new Vector2();
	Vector2 posHowButtonStart=new Vector2();
	Vector2 posHowButtonStop=new Vector2();
	
	Vector2 posPlayerPromptOffscreen=new Vector2();
	Vector2 posPlayerPromptOnscreen=new Vector2();
	
	Vector2 buyinDialogOpenDims=new Vector2();
	// Controllers //
	public ForegroundRenderer foregroundRenderer;
	GestureDetector gestureInput;
	public ForegroundInput input;
	public TutorialArrangement tutorialArrangement;
	// Objects //
	public DPCSprite logoDPC=new DPCSprite();
	public Button createButton;
	public TextLabel createLabel;
	public Button joinButton;
	public TextLabel joinLabel;
	public Button howButton;
	public TextLabel howLabel;
	public Button wifiButton;
	public TextLabel wifiLabel;
	public Button helpButton;
	public Button backButton;
	public TextLabel playerPrompt;
	public TextLabel enterName1Label;
	public TextLabel enterName2Label;
	public Button enterNameDoneButton;
	public TextLabel enterTableName1Label;
	public TextLabel enterTableName2Label;
	public Button enterTableNameDoneButton;
	public TextLabel searchingLabel;
	public TextLabel setValuesLabel;
	public Button setValuesOkButton;
	public Button[] valueUpArrows=new Button[ChipCase.CHIP_TYPES];
	public Button[] valueDownArrows=new Button[ChipCase.CHIP_TYPES];
	public DialogWindow dialogWindow;
	public BuyinDialog buyinDialog;
	public ClosedDialog buyinDialogSmall;
	public DivisibilityDialog divisibilityDialog;
	public TableStatusMenu tableStatusMenu;
	public SearchingAnimation searchingAnimation;
	public Button readyToStartButton;
	public DialogWindow helpWindow;
	public HelpDialog helpDialog;
	public ClosedDialog helpDialogSmall;
	public Button foldButton;
	
	public TextLabel waitingLabel;
	public TextLabel allJoinedLabel;
	public TextLabel selectingDealerLabel;
	public TextLabel winLabel;
	
	// References //
	public DPCGame game;
	// Debugging //
	public TextLabel azimuthLabel;
	int secondTimer=0;
	
	
	public ForegroundLayer(DPCGame game_) {
		game=game_;
		foregroundRenderer=new ForegroundRenderer(this);
		
		input=new ForegroundInput();
		input.setScreen(this);
		ForegroundGestureInput mFGI=new ForegroundGestureInput();
		gestureInput=new GestureDetector(mFGI);
		mFGI.setScreen(this);
		runTutorialArrangement=false;

		openHelpOnStartup=false;
		animationState=STATE_NONE;
		tutorialArrangement=new TutorialArrangement();
		
		createButton=new Button(true,0,"");
		createLabel=new TextLabel("Create a Table",0,true,1,false);
		createLabel.setFontFace("stone_sans_semi_bold_italic.ttf");
		joinButton=new Button(true,0,"");
		joinLabel=new TextLabel("Join a Table",0,true,1,false);
		joinLabel.setFontFace("stone_sans_semi_bold_italic.ttf");
		howButton=new Button(true,0,"");
		howLabel=new TextLabel("How it Works",0,true,1,false);
		howLabel.setFontFace("stone_sans_semi_bold_italic.ttf");
		
		wifiButton=new Button(true,0,"");
		wifiLabel=new TextLabel("Please Connect to WiFi",0,true,0,false);
		wifiLabel.setFontFace("segoe_print.ttf");
		helpButton=new Button(true,1,"");
		helpButton.setTouchErrorMargin(1.1f);
		helpButton.setTouchable(true);
		backButton=new Button(true,1,"");
		backButton.setTouchErrorMargin(1.1f);
		backButton.opacity=1;
		
		playerPrompt=new TextLabel("",0,true,0,false);
		
		enterName1Label=new TextLabel("Enter Player's",0,true,0,false);
		enterName1Label.setFontFace("segoe_print.ttf");
		enterName2Label=new TextLabel("Name",0,true,0,false);
		enterName2Label.setFontFace("segoe_print.ttf");
		enterNameDoneButton=new Button(true,0,"");
		
		enterTableName1Label=new TextLabel("Enter Table's",0,true,0,false);
		enterTableName1Label.setFontFace("segoe_print.ttf");
		enterTableName2Label=new TextLabel("Name",0,true,0,false);
		enterTableName2Label.setFontFace("segoe_print.ttf");
		enterTableNameDoneButton=new Button(true,0,"");
		
		searchingLabel=new TextLabel("Searching for Tables",0,true,0,false);
		searchingLabel.setFontFace("segoe_print.ttf");
		
		setValuesLabel=new TextLabel("Set Chip Values",0,true,0,false);
		setValuesLabel.setFontFace("segoe_print.ttf");
		setValuesOkButton=new Button(true,0,"");
		setValuesOkButton.setTouchable(true);
		for (int i=0;i<ChipCase.CHIP_TYPES;i++) {
			valueUpArrows[i]=new Button(true,0,"");
			valueUpArrows[i].setTouchable(true);
			valueUpArrows[i].setTouchErrorMargin(2f);
			valueDownArrows[i]=new Button(true,0,"");
			valueDownArrows[i].setTouchable(true);
			valueDownArrows[i].setTouchErrorMargin(2f);
		}
		divisibilityDialog=new DivisibilityDialog();
		dialogWindow=new DialogWindow();
		dialogWindow.opacity=0;
		buyinDialog=new BuyinDialog(this);
		buyinDialog.opacity=0;
		buyinDialogSmall=new ClosedDialog(helpWindow);
		buyinDialogSmall.opacity=0;
		tableStatusMenu=new TableStatusMenu(this);
		tableStatusMenu.opacity=0;
		
		searchingAnimation=new SearchingAnimation();
		searchingAnimation.opacity=0;
		
		readyToStartButton=new Button(false,0,"Start Game");
		readyToStartButton.opacity=0;
		readyToStartButton.getLabel().outline=true;
		
		helpWindow=new DialogWindow();
		helpWindow.opacity=0;
		helpDialog=new HelpDialog(this);
		helpDialog.opacity=0;
		helpDialogSmall=new ClosedDialog(helpWindow);
		helpDialogSmall.opacity=0;
		
		foldButton=new Button(true,0,"");
		
		
		waitingLabel=new TextLabel("Waiting for Players to Join",0,true,0,false);
		waitingLabel.setFontFace("segoe_print.ttf");
		allJoinedLabel=new TextLabel("All Players Joined?",0,true,0,false);
		allJoinedLabel.setFontFace("segoe_print.ttf");
		selectingDealerLabel=new TextLabel("Selecting Dealer",0,true,0,false);
		selectingDealerLabel.setFontFace("segoe_print.ttf");
		winLabel=new TextLabel("",0,true,0,false);
		winLabel.setFontFace("segoe_print.ttf");
		
		azimuthLabel=new TextLabel("360",0,true,1,false);
	}
	
	public void dispose() {
		tableStatusMenu.dispose();
		foregroundRenderer.dispose();
		game=null;
	}
	
	public void resize(int screenWidth,int screenHeight) {
		foregroundRenderer.resize(screenWidth,screenHeight);
		if ((screenWidth!=this.screenWidth||screenHeight!=this.screenHeight)&&
				(screenWidth>screenHeight)) {
			this.screenWidth=screenWidth;
			this.screenHeight=screenHeight;
			setDimensions(screenWidth,screenHeight);
			// TODO change this to allow for scaling dimensions
			if (!screenLaidOut) {
				setPositions(screenWidth,screenHeight);
				screenLaidOut=true;
			} else {
				float scaleX_=screenWidth/this.screenWidth;
				float scaleY_=screenHeight/this.screenHeight;
				scalePositions(scaleX_,scaleY_);
			}
		}
	}
	
	private void setDimensions(float screenWidth,float screenHeight) {
		
		limFlingVelocity=screenHeight*0.2f;
		
		logoDPC.setDimensions((int)(screenHeight*0.36f),(int)(screenHeight*0.12f));
		
		createButton.setDimensions((int)(screenHeight*0.36f),(int)(screenHeight*0.07f));
		createLabel.setMaxDimensions((int)(createButton.radiusX*0.75f),(int)(createButton.radiusY*0.75f));
		joinButton.setDimensions((int)(screenHeight*0.36f),(int)(screenHeight*0.07f));
		joinLabel.setMaxDimensions((int)(joinButton.radiusX*0.75f),(int)(joinButton.radiusY*0.75f));
		howButton.setDimensions((int)(screenHeight*0.36f),(int)(screenHeight*0.07f));
		howLabel.setMaxDimensions((int)(howButton.radiusX*0.75f),(int)(howButton.radiusY*0.75f));
		int textSize_=Math.min(DPCGame.textFactory.getMaxTextSize(createLabel),
				DPCGame.textFactory.getMaxTextSize(joinLabel));
		textSize_=Math.min(textSize_,DPCGame.textFactory.getMaxTextSize(howLabel));
		createLabel.setTextSize(textSize_);
		joinLabel.setTextSize(textSize_);
		howLabel.setTextSize(textSize_);
		
		wifiButton.setDimensions((int)(screenHeight*0.08f),(int)(screenHeight*0.08f));
		helpButton.setDimensions((int)(screenHeight*0.08f),(int)(screenHeight*0.08f));
		backButton.setDimensions((int)(screenHeight*0.06f),(int)(screenHeight*0.06f));
		
		foldButton.setDimensions((int)(screenHeight*0.15f),(int)(screenHeight*0.15f));
		
		playerPrompt.setMaxDimensions((int)(screenWidth*0.20f),(int)(screenHeight*0.04f));
		playerPrompt.setText(GameLogic.PROMPT_MEASURE);
		playerPrompt.setTextSizeToMax();
		playerPrompt.setText("");
		
		enterName1Label.setMaxDimensions((int)(screenWidth*0.14f),(int)(screenHeight*0.2f));
		enterName2Label.setMaxDimensions((int)(screenWidth*0.14f),(int)(screenHeight*0.2f));
		textSize_=Math.min(DPCGame.textFactory.getMaxTextSize(enterName1Label),
				DPCGame.textFactory.getMaxTextSize(enterName2Label));
		enterName1Label.setTextSize(textSize_);
		enterName2Label.setTextSize(textSize_);
		enterNameDoneButton.setDimensions((int)(screenHeight*0.08f),(int)(screenHeight*0.08f));
		
		enterTableName1Label.setMaxDimensions((int)(screenWidth*0.12f),(int)(screenHeight*0.1f));
		enterTableName2Label.setMaxDimensions((int)(screenWidth*0.12f),(int)(screenHeight*0.1f));
		textSize_=Math.min(DPCGame.textFactory.getMaxTextSize(enterTableName1Label),
				DPCGame.textFactory.getMaxTextSize(enterTableName2Label));
		enterTableName1Label.setTextSize(textSize_);
		enterTableName2Label.setTextSize(textSize_);
		enterTableNameDoneButton.setDimensions((int)(screenHeight*0.08f),(int)(screenHeight*0.08f));
		
		searchingLabel.setMaxDimensions((int)(screenWidth*0.2f),(int)(screenHeight*0.1f));
		wifiLabel.setMaxDimensions((int)(screenWidth*0.2f),(int)(screenHeight*0.1f));
		textSize_=Math.min(DPCGame.textFactory.getMaxTextSize(searchingLabel),
				DPCGame.textFactory.getMaxTextSize(wifiLabel));
		searchingLabel.setTextSize(textSize_);
		wifiLabel.setTextSize(textSize_);
		
		setValuesLabel.setMaxDimensions((int)(screenWidth*0.14f),(int)(screenHeight*0.2f));
		setValuesLabel.setTextSizeToMax();
		setValuesOkButton.setDimensions((int)(screenHeight*0.08f),(int)(screenHeight*0.08f));
		for (int i=0;i<ChipCase.CHIP_TYPES;i++) {
			valueDownArrows[i].setDimensions((int)(screenHeight*0.05f),(int)(screenHeight*0.05f));
			valueUpArrows[i].setDimensions((int)(screenHeight*0.05f),(int)(screenHeight*0.05f));
		}
		divisibilityDialog.setDimensions((int)(screenWidth*0.3f),(int)(screenHeight*0.06f));
		
		tutorialArrangement.setDimensions(screenWidth,screenHeight);
		
		buyinDialog.setDimensions((int)(screenHeight*0.6f),(int)(screenHeight*0.45f));
		buyinDialogSmall.setDimensions(1,1);
		
		tableStatusMenu.setDimensions((int)(screenWidth*0.16f),(int)(screenHeight*0.45f));
		
		readyToStartButton.setDimensions((int)(screenWidth*0.16f),(int)(screenHeight*0.06f));
		
		searchingAnimation.setDimensions((int)(screenHeight*0.04f),(int)(screenHeight*0.04f));
		
		helpDialog.setDimensions((int)(screenHeight*0.64f),(int)(screenHeight*0.45f));
		helpDialogSmall.setDimensions(1,1);
		
		int radiusXHostPrompts=(int)(screenWidth*0.3f);
		int radiusYHostPrompts=(int)(screenHeight*0.1f);
		waitingLabel.setMaxDimensions(radiusXHostPrompts,radiusYHostPrompts);
		allJoinedLabel.setMaxDimensions(radiusXHostPrompts,radiusYHostPrompts);
		selectingDealerLabel.setMaxDimensions(radiusXHostPrompts,radiusYHostPrompts);
		winLabel.setMaxDimensions(radiusXHostPrompts,radiusYHostPrompts);
		winLabel.setText(WorldLayer.NAME_MEASURE+WIN_TEXT);
		textSize_=Math.min(DPCGame.textFactory.getMaxTextSize(waitingLabel),
				DPCGame.textFactory.getMaxTextSize(allJoinedLabel));
		textSize_=Math.min(DPCGame.textFactory.getMaxTextSize(selectingDealerLabel),textSize_);
		textSize_=Math.min(DPCGame.textFactory.getMaxTextSize(winLabel),textSize_);
		waitingLabel.setTextSize(textSize_);
		allJoinedLabel.setTextSize(textSize_);
		selectingDealerLabel.setTextSize(textSize_);
		winLabel.setTextSize(textSize_);
		winLabel.setText("");
		
		azimuthLabel.setMaxDimensions((int)(screenHeight*0.1f),(int)(screenHeight*0.05f));
		azimuthLabel.setTextSizeToMax();
	}
	
	private void setPositions(float screenWidth,float screenHeight) {
		
		posLogoDPCStart.set(0+logoDPC.radiusX*1.1f,screenHeight+logoDPC.radiusY*3f);
		posLogoDPCStop.set(0+logoDPC.radiusX*1.1f,screenHeight-logoDPC.radiusY*1.2f);
		logoDPC.setPosition(posLogoDPCStart);
		
		posCreateButtonStart.set(0-createButton.radiusX*3f,screenHeight*0.6f);
		posCreateButtonStop.set(0+createButton.radiusX*0.9f,screenHeight*0.6f);
		createButton.setPosition(posCreateButtonStart);
		createLabel.setPosition(posCreateButtonStart);
		posJoinButtonStart.set(0-joinButton.radiusX*3f,screenHeight*0.46f);
		posJoinButtonStop.set(0+joinButton.radiusX*0.9f,screenHeight*0.46f);
		joinButton.setPosition(posJoinButtonStart);
		joinLabel.setPosition(posJoinButtonStart);
		posHowButtonStart.set(0-howButton.radiusX*3f,screenHeight*0.32f);
		posHowButtonStop.set(0+howButton.radiusX*0.9f,screenHeight*0.32f);
		howButton.setPosition(posHowButtonStart);
		howLabel.setPosition(posHowButtonStart);
		
		wifiButton.setPosition(screenWidth*0.5f,screenHeight*0.85f);
		helpButton.setPosition(screenWidth-helpButton.radiusX*1.1f,helpButton.radiusY*1.1f);
		backButton.setPosition(0+backButton.radiusX*1.2f,0+backButton.radiusY*1.2f);
		
		foldButton.setPosition(screenWidth*0.1f,screenHeight*0.80f);
		
		posPlayerPromptOffscreen.set(screenWidth*0.8f,screenHeight+playerPrompt.maxRadiusY*1.2f);
		posPlayerPromptOnscreen.set(screenWidth*0.8f,screenHeight-playerPrompt.maxRadiusY*1.1f);
		
		enterName1Label.setPosition(screenWidth*0.16f,screenHeight*0.72f);
		enterName2Label.setPosition(screenWidth*0.16f,screenHeight*0.64f);
		enterNameDoneButton.setPosition(screenWidth*0.76f,screenHeight*0.68f);
		
		enterTableName1Label.setPosition(screenWidth*0.14f,screenHeight*0.77f);
		enterTableName2Label.setPosition(screenWidth*0.14f,screenHeight*0.69f);
		enterTableNameDoneButton.setPosition(screenWidth*0.8f,screenHeight*0.73f);
		
		searchingLabel.setPosition(screenWidth*0.5f,screenHeight*0.7f);
		wifiLabel.setPosition(screenWidth*0.5f,screenHeight*0.7f);
		
		setValuesLabel.setPosition(screenWidth*0.16f,screenHeight*0.34f);
		setValuesOkButton.setPosition(screenWidth*0.76f,screenHeight*0.34f);
		float xValueSpacing_=screenWidth*0.125f;
		float xValueStart_=screenWidth*0.5f-xValueSpacing_;
		for (int i=0;i<ChipCase.CHIP_TYPES;i++) {
			valueDownArrows[i].setPosition(xValueStart_+i*xValueSpacing_,screenHeight*0.2f);
			valueUpArrows[i].setPosition(xValueStart_+i*xValueSpacing_,screenHeight*0.48f);
		}
		divisibilityDialog.setPosition(screenWidth*0.5f,screenHeight*0.08f);
		
		dialogWindow.setPosition(1,1);
		buyinDialog.setPosition(screenWidth*0.5f,screenHeight*0.5f);
		buyinDialogSmall.setPosition(screenWidth*0.5f,screenHeight*0.95f);
		
		tableStatusMenu.setPosition(screenWidth-tableStatusMenu.radiusX,screenHeight*0.445f);
		
		searchingAnimation.setPosition(screenWidth*0.5f,screenHeight*0.85f);
		
		tutorialArrangement.setPositions(screenWidth,screenHeight);
		
		helpDialog.setPosition(screenWidth*0.5f,screenHeight*0.5f);
		helpDialogSmall.setPosition(posHowButtonStop.x-howButton.radiusX,posHowButtonStop.y);
		helpWindow.setPosition(helpDialogSmall.x,helpDialogSmall.y);
		
		float xHostPrompts=screenWidth*0.5f;
		float yHostPrompts=screenHeight*0.65f;
		waitingLabel.setPosition(xHostPrompts,yHostPrompts);
		allJoinedLabel.setPosition(xHostPrompts,yHostPrompts);
		selectingDealerLabel.setPosition(xHostPrompts,yHostPrompts);
		winLabel.setPosition(xHostPrompts,yHostPrompts);
		readyToStartButton.setPosition(screenWidth*0.5f,screenHeight*0.35f);
		
		azimuthLabel.setPosition(azimuthLabel.maxRadiusX,azimuthLabel.maxRadiusY);
	}
	
	private void scalePositions(float scaleX_,float scaleY_) {
		
		logoDPC.scalePosition(scaleX_,scaleY_);
		
		wifiButton.scalePosition(scaleX_,scaleY_);
		helpButton.scalePosition(scaleX_,scaleY_);
		backButton.scalePosition(scaleX_,scaleY_);
		
		enterName1Label.scalePosition(scaleX_,scaleY_);
		enterName2Label.scalePosition(scaleX_,scaleY_);
		enterNameDoneButton.scalePosition(scaleX_,scaleY_);
		enterTableName1Label.scalePosition(scaleX_,scaleY_);
		enterTableName2Label.scalePosition(scaleX_,scaleY_);
		enterTableNameDoneButton.scalePosition(scaleX_,scaleY_);
		searchingLabel.scalePosition(scaleX_,scaleY_);
		wifiLabel.scalePosition(scaleX_,scaleY_);
		setValuesLabel.scalePosition(scaleX_,scaleY_);
		setValuesOkButton.scalePosition(scaleX_,scaleY_);
		for (int i=0;i<ChipCase.CHIP_TYPES;i++) {
			valueDownArrows[i].scalePosition(scaleX_,scaleY_);
			valueUpArrows[i].scalePosition(scaleX_,scaleY_);
		}
		divisibilityDialog.scalePosition(scaleX_,scaleY_);
		
		dialogWindow.scalePosition(scaleX_,scaleY_);
		
		buyinDialog.scalePosition(scaleX_,scaleY_);
		tableStatusMenu.scalePosition(scaleX_,scaleY_);
		
		searchingAnimation.scalePosition(scaleX_, scaleY_);
		
		readyToStartButton.scalePosition(scaleX_,scaleY_);
		
		tutorialArrangement.scalePositions(scaleX_,scaleY_);
		
		helpWindow.scalePosition(scaleX_,scaleY_);
		helpDialog.scalePosition(scaleX_,scaleY_);
		
		waitingLabel.scalePosition(scaleX_,scaleY_);
		allJoinedLabel.scalePosition(scaleX_,scaleY_);
		selectingDealerLabel.scalePosition(scaleX_,scaleY_);
		winLabel.scalePosition(scaleX_,scaleY_);
	}
	
	public void resume() {
		if (!foregroundRenderer.texturesLoaded) {
			foregroundRenderer.loadTextures(game.manager);
		}
	}
	
	public void render(float delta) {
		controlLogic();
		if (!game.freezeAnimation) {
			animate(delta);
		}
		tutorialArrangement.animate(delta);
		foregroundRenderer.render();
	}
	
	public void controlLogic() {
		
		if (openHelpOnStartup) {
			openHelpOnStartup=false;
			helpDialog.setFirstOpenMode(true);
			openHelp();
			stopHome();
		}
	}
	
	public void animate(float delta) {
		waitingLabel.animate(delta);
		selectingDealerLabel.animate(delta);
		winLabel.animate(delta);
		if (animationState==STATE_HOME) {
			if (Math.abs(logoDPC.x-posLogoDPCStop.x)>2||
					Math.abs(logoDPC.y-posLogoDPCStop.y)>2) {
				float deltaX_=9*delta*(posLogoDPCStop.x-logoDPC.x);
				float deltaY_=9*delta*(posLogoDPCStop.y-logoDPC.y);
				logoDPC.x+=deltaX_;
				logoDPC.y+=deltaY_;
			} else {
				if (Math.abs(createButton.x-posCreateButtonStop.x)>2||
						Math.abs(createButton.y-posCreateButtonStop.y)>2) {
					float deltaX_=9*delta*(posCreateButtonStop.x-createButton.x);
					float deltaY_=9*delta*(posCreateButtonStop.y-createButton.y);
					createButton.x+=deltaX_;
					createButton.y+=deltaY_;
					createLabel.x=createButton.x;
					createLabel.y=createButton.y;
				}
				if (Math.abs(joinButton.x-posJoinButtonStop.x)>2||
						Math.abs(joinButton.y-posJoinButtonStop.y)>2) {
					float deltaX_=9*delta*(posJoinButtonStop.x-joinButton.x);
					float deltaY_=9*delta*(posJoinButtonStop.y-joinButton.y);
					joinButton.x+=deltaX_;
					joinButton.y+=deltaY_;
					joinLabel.x=joinButton.x;
					joinLabel.y=joinLabel.y;
				}
				if (Math.abs(howButton.x-posHowButtonStop.x)>2||
						Math.abs(howButton.y-posHowButtonStop.y)>2) {
					float deltaX_=9*delta*(posHowButtonStop.x-howButton.x);
					float deltaY_=9*delta*(posHowButtonStop.y-howButton.y);
					howButton.x+=deltaX_;
					howButton.y+=deltaY_;
					howLabel.x=howButton.x;
					howLabel.y=howButton.y;
				}
			}
		} else {
			if (Math.abs(logoDPC.x-posLogoDPCStart.x)>2||
					Math.abs(logoDPC.y-posLogoDPCStart.y)>2) {
				float deltaX_=5*delta*(posLogoDPCStart.x-logoDPC.x);
				float deltaY_=5*delta*(posLogoDPCStart.y-logoDPC.y);
				logoDPC.x+=deltaX_;
				logoDPC.y+=deltaY_;
			}
			if (Math.abs(createButton.x-posCreateButtonStart.x)>2||
					Math.abs(createButton.y-posCreateButtonStart.y)>2) {
				float deltaX_=5*delta*(posCreateButtonStart.x-createButton.x);
				float deltaY_=5*delta*(posCreateButtonStart.y-createButton.y);
				createButton.x+=deltaX_;
				createButton.y+=deltaY_;
				createLabel.x=createButton.x;
				createLabel.y=createButton.y;
			}
			if (Math.abs(joinButton.x-posJoinButtonStart.x)>2||
					Math.abs(joinButton.y-posJoinButtonStart.y)>2) {
				float deltaX_=5*delta*(posJoinButtonStart.x-joinButton.x);
				float deltaY_=5*delta*(posJoinButtonStart.y-joinButton.y);
				joinButton.x+=deltaX_;
				joinButton.y+=deltaY_;
				joinLabel.x=joinButton.x;
				joinLabel.y=joinLabel.y;
			}
			if (Math.abs(howButton.x-posHowButtonStart.x)>2||
					Math.abs(howButton.y-posHowButtonStart.y)>2) {
				float deltaX_=5*delta*(posHowButtonStart.x-howButton.x);
				float deltaY_=5*delta*(posHowButtonStart.y-howButton.y);
				howButton.x+=deltaX_;
				howButton.y+=deltaY_;
				howLabel.x=howButton.x;
				howLabel.y=howButton.y;
			}
		}
		
		wifiButton.animate(delta);
		helpButton.animate(delta);
		backButton.animate(delta);
		
		if (showPlayerPrompt) {
			if (Math.abs(playerPrompt.y-posPlayerPromptOnscreen.y)>1) {
				float deltaY_=9*delta*(posPlayerPromptOnscreen.y-playerPrompt.y);
				playerPrompt.y+=deltaY_;
			}
		} else {
			if (Math.abs(playerPrompt.y-posPlayerPromptOffscreen.y)>1) {
				float deltaY_=9*delta*(posPlayerPromptOffscreen.y-playerPrompt.y);
				playerPrompt.y+=deltaY_;
			} else {
				playerPrompt.opacity=0;
			}
		}
		
		enterName1Label.animate(delta);
		enterName2Label.animate(delta);
		enterNameDoneButton.animate(delta);
		
		enterTableName1Label.animate(delta);
		enterTableName2Label.animate(delta);
		enterTableNameDoneButton.animate(delta);
		
		searchingLabel.animate(delta);
		searchingAnimation.animate(delta);
		if (searchingLabel.getIsFlashing()&&searchingLabel.opacity==0) {
			searchingAnimation.ping();
		}
		wifiLabel.animate(delta);
		
		setValuesLabel.animate(delta);
		setValuesOkButton.animate(delta);
		for (int i=0;i<ChipCase.CHIP_TYPES;i++) {
			valueDownArrows[i].animate(delta);
			valueUpArrows[i].animate(delta);
		}
		
		dialogWindow.animate(delta);
		buyinDialog.animate(delta);
		tableStatusMenu.animate(delta);
		divisibilityDialog.animate(delta);
		if (!tutorialArrangement.isRunning()) {
			readyToStartButton.animate(delta);
			allJoinedLabel.animate(delta);
		}
		
		helpWindow.animate(delta);
		if (helpOpen) {
			helpDialog.animate(delta);
		}
		
		foldButton.animate(delta);
		
		secondTimer+=delta*1000;
		if (secondTimer>=300) {
			secondTimer=0;
			azimuthLabel.setText(Integer.toString(game.calculateAzimuth()));
			DPCGame.textRenderer.updateAzimuth();
		}
	}
	
	public void startWifiPrompt() {
		wifiButton.startFlashing();
		wifiButton.setTouchable(true);
		wifiLabel.startFlashing();
	}
	
	public void stopWifiPrompt() {
		wifiButton.fadeOut();
		wifiButton.setTouchable(false);
		wifiLabel.fadeOut();
	}
	
	public void startEnterPlayerName() {
		enterName1Label.fadeIn();
		enterName2Label.fadeIn();
		enterNameDoneButton.fadeIn();
		enterNameDoneButton.setTouchable(true);
		input.pushTouchFocus(ForegroundInput.TOUCH_PLAYERS_NAME);
	}
	
	public void stopEnterPlayerName() {
		enterName1Label.fadeOut();
		enterName2Label.fadeOut();
		enterNameDoneButton.fadeOut();
		enterNameDoneButton.setTouchable(false);
		if (input.getLastTouchFocus()==ForegroundInput.TOUCH_PLAYERS_NAME) {
			input.popTouchFocus();
		} else {
			Gdx.app.log("DPC touch", "Error popping players name");
		}
		game.mWL.stopEnterPlayerName();
	}
	
	public void playerNameDone() {
		stopEnterPlayerName();
		game.mWL.playerNameDone();
	}
	
	public void startEnterTableName() {
		enterTableName1Label.fadeIn();
		enterTableName2Label.fadeIn();
		enterTableNameDoneButton.fadeIn();
		enterTableNameDoneButton.setTouchable(true);
		input.pushTouchFocus(ForegroundInput.TOUCH_TABLES_NAME);
	}
	
	public void stopEnterTableName() {
		enterTableName1Label.fadeOut();
		enterTableName2Label.fadeOut();
		enterTableNameDoneButton.fadeOut();
		enterTableNameDoneButton.setTouchable(false);
		if (input.getLastTouchFocus()==ForegroundInput.TOUCH_TABLES_NAME) {
			input.popTouchFocus();
		} else {
			Gdx.app.log("DPC touch", "Error popping tables name");
		}
		game.mWL.stopEnterTableName();
	}

	public void startSetValues() {
		setValuesLabel.fadeIn();
		setValuesOkButton.fadeIn();
		for (int i=0;i<ChipCase.CHIP_TYPES;i++) {
			valueUpArrows[i].fadeIn();
			valueDownArrows[i].fadeIn();
		}
		input.pushTouchFocus(ForegroundInput.TOUCH_CHIP_VALUES);
	}

	public void stopSetValues() {
		setValuesLabel.fadeOut();
		setValuesOkButton.fadeOut();
		for (int i=0;i<ChipCase.CHIP_TYPES;i++) {
			valueUpArrows[i].fadeOut();
			valueDownArrows[i].fadeOut();
		}
		if (input.getLastTouchFocus()==ForegroundInput.TOUCH_CHIP_VALUES) {
			input.popTouchFocus();
		} else {
			Gdx.app.log("DPC touch", "Error popping chip values");
		}
	}
	
	public void startBuyin(String tableName) {
		dialogWindow.setOpacity(1);
		dialogWindow.setPosition(buyinDialogSmall.x,buyinDialogSmall.y);
		dialogWindow.setDimensions(buyinDialogSmall.radiusX,buyinDialogSmall.radiusY);
		dialogWindow.sendTo(buyinDialog);
		buyinDialog.disappear();
		buyinDialog.setTableName(tableName);
		DPCGame.textRenderer.updateBuyinTitle();
	}
	
	public void stopBuyin() {
		dialogWindow.fadeOut();
		buyinDialog.stop();
	}
	
	public void notifyAtPlayerPosition() {
		input.pushTouchFocus(ForegroundInput.TOUCH_PLAYER);
	}
	
	public void notifyZoomOutPlayer() {
		tableStatusMenu.disappear();
		stopWifiPrompt();
		playerPrompt.fadeOut();
		playerPrompt.opacity=0;
		if (input.getLastTouchFocus()==ForegroundInput.TOUCH_PLAYER) {
			input.popTouchFocus();
		} else {
			Gdx.app.log("DPC touch", "Error popping searching");
		}
	}

	public void searchForGames() {
		searchingLabel.startFlashing();
		searchingAnimation.ping();
	}
	
	public void stopSearchForGames() {
		searchingAnimation.stop();
		searchingLabel.stopFlashing();
		searchingLabel.opacity=0;
	}
	
	public void leaveTable() {
		tableStatusMenu.hide();
		if (input.getLastTouchFocus()==ForegroundInput.TOUCH_PLAYER_GAMEPLAY) {
			input.popTouchFocus();
		} else {
			Gdx.app.log("DPC touch", "Error popping player gameplay");
		}
	}
	
	public void notifyConnectResult(boolean result,String tableName) {
		if (result) {
			tableStatusMenu.setTableName(tableName);
			input.pushTouchFocus(ForegroundInput.TOUCH_PLAYER_GAMEPLAY);
		} else {
			
		}
	}
	
	public void setupRxd() {
		tableStatusMenu.show();
	}
	
	public void startLobby() {
		waitingLabel.startFlashing();
		input.pushTouchFocus(ForegroundInput.TOUCH_LOBBY);
	}
	
	public void stopLobby() {
		waitingLabel.fadeOut();
		allJoinedLabel.fadeOut();
		stopWifiPrompt();
		readyToStartButton.fadeOut();
		readyToStartButton.setTouchable(false);
		if (input.getLastTouchFocus()==ForegroundInput.TOUCH_LOBBY) {
			input.popTouchFocus();
		} else {
			Gdx.app.log("DPC touch", "Error popping lobby");
		}
	}
	
	public void notifyGameCanStart() {
		readyToStartButton.fadeIn();
		readyToStartButton.setTouchable(true);
		waitingLabel.fadeOut();
		allJoinedLabel.fadeIn();
	}
	
	public void notifyGameCantStart() {
		readyToStartButton.fadeOut();
		readyToStartButton.setTouchable(false);
		allJoinedLabel.fadeOut();
		waitingLabel.fadeIn();
	}
	
	public void pauseLobby() {
		waitingLabel.fadeOut();
		allJoinedLabel.fadeOut();
		readyToStartButton.fadeOut();
		readyToStartButton.setTouchable(false);
	}
	
	public void resumeLobby() {
		if (game.mWL.table.countPlayers()<2) {
			waitingLabel.startFlashing();
		} else {
			allJoinedLabel.fadeIn();
			readyToStartButton.fadeIn();
			readyToStartButton.setTouchable(true);
		}
	}

	public void openHelp() {
		helpOpen=true;
		helpWindow.opacity=1;
		helpWindow.setPosition(helpDialogSmall.x,helpDialogSmall.y);
		helpWindow.setDimensions(helpDialogSmall.radiusX,helpDialogSmall.radiusY);
		helpWindow.sendTo(helpDialog);
		input.pushTouchFocus(ForegroundInput.TOUCH_HELP_WINDOW);
	}

	public void closeHelp() {
		helpOpen=false;
		helpWindow.sendTo(helpDialogSmall);
		helpDialog.stop();
		if (input.getLastTouchFocus()==ForegroundInput.TOUCH_HELP_WINDOW) {
			input.popTouchFocus();
		} else {
			Gdx.app.log("DPC touch", "Error popping help window");
		}
		startHome();
	}

	public void startHome() {
		if (!helpOpen) {
			input.pushTouchFocus(ForegroundInput.TOUCH_HOME);
			animationState=STATE_HOME;
			createButton.setTouchable(true);
			joinButton.setTouchable(true);
			howButton.setTouchable(true);
		}
	}
	
	private void stopHome() {
		input.popTouchFocus();
		animationState=STATE_NONE;
		createButton.setTouchable(false);
		joinButton.setTouchable(false);
		howButton.setTouchable(false);
	}

	public void createSelected() {
		stopHome();
		game.mWL.zoomToTableName();
	}
	
	public void joinSelected() {
		stopHome();
		game.mWL.zoomToPlayer();
	}
	public void howSelected() {
		stopHome();
		openHelp();
	}

	public void leaveButtonPressed() {
		game.leaveTable();
		tableStatusMenu.hide();
		game.mWL.thisPlayer.searchHolddoff();
	}
	
	public void startTutorialArrangement(Player player) {
		game.runTutorialArrangement=false;
		input.pushTouchFocus(ForegroundInput.TOUCH_TUTORIAL_ARRANGEMENT);
		tutorialArrangement.start(player,this);
	}

	public void notifyReadyToStart() {
		game.mWL.table.notifyReadyToStart();
	}

	public void startDealerSelect() {
		selectingDealerLabel.startFlashing();
		input.pushTouchFocus(ForegroundInput.TOUCH_HOST_GAMEPLAY);
	}
	
	public void stopDealerSelect() {
		selectingDealerLabel.fadeOut();
		//if (input.getLastTouchFocus()==ForegroundInput.TOUCH_HOST_GAMEPLAY) {
		//	input.popTouchFocus();
		//} else {
		//	Gdx.app.log("DPC touch", "Error popping table status");
		//}
	}

	public void startGame() {
		//input.pushTouchFocus(ForegroundInput.TOUCH_);
	}

	public void showWinLabel(TextLabel name) {
		winLabel.setText(name.getText()+WIN_TEXT);
		foregroundRenderer.loadWinLabel();
		winLabel.fadeIn();
	}

	public void showTextMessage(String textMessage) {
		playerPrompt.setPosition(posPlayerPromptOffscreen);
		playerPrompt.setText(textMessage);
		playerPrompt.loadTexture();
		playerPrompt.x=screenWidth-playerPrompt.radiusX*1.1f;
		playerPrompt.opacity=1;
		showPlayerPrompt=true;
	}
	
	public void hideTextMessage() {
		showPlayerPrompt=false;
	}
}
