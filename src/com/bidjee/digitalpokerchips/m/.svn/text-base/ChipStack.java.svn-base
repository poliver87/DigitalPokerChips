package com.bidjee.digitalpokerchips.m;

import java.util.ArrayList;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.math.Vector2;
import com.bidjee.digitalpokerchips.c.Table;

public class ChipStack {
	
	private static final int FADE_NONE = 0;
	private static final int FADE_FADE_IN = 1;
	private static final int FADE_FADE_OUT = 2;
	
	public ArrayList<Chip> stack;
	
	private int fadeState;
	
	private float x;
	private float y;
	private float z;
	public float originY;
	public float velocityX;
	public float velocityY;
	float destX;
	float destY;
	float destZ;
	
	public boolean isTouched;
	public float touchDownX;
	public float touchDownY;
	public float touchDraggedX;
	public float touchDraggedY;
	
	public int maxRenderNum;
	
	private float rotation;
	private float opacity;
	
	public TextLabel totalLabel;
	
	public int radiusX;
	public int radiusY;
	
	public ChipStack() {
		stack=new ArrayList<Chip>();
		x=0;
		y=0;
		z=0;
		originY=0;
		velocityX=0;
		velocityY=0;
		destX=0;
		destY=0;
		destZ=0;
		isTouched=false;
		maxRenderNum=Table.MAX_STACK_RENDER_NUM;
		rotation=0;
		opacity=1;
		totalLabel=new TextLabel("",0,true,1,false);
	}
	
	public void scaleLabel() {
		totalLabel.setMaxDimensions(Chip.radiusX,Chip.radiusY);
		String tmp_=totalLabel.getText();
		totalLabel.setText("9999999");
		totalLabel.setTextSizeToMax();
		totalLabel.setText(tmp_);
	}
	
	public void updateTotalLabel() {
		totalLabel.setText(Integer.toString(value()));
		totalLabel.loadTexture();
		totalLabel.x=getTopX();
		totalLabel.y=getTopY();
	}
	
	public void setOriginY(float originY_) {originY=originY_;}
	
	public void scaleOriginY(float scaleY_) {originY*=scaleY_;}
	
	public void setVelocityY(float velocityY_) {velocityY=velocityY_;}
	public void setVelocityX(float velocityX_) {velocityX=velocityX_;}
	public void setVelocitiesForOffScreen(float mag_) {
		if (rotation==0||rotation==360) {
			velocityY=mag_*-1;
			velocityX=0;
		} else if (rotation==-90||rotation==270) {
			velocityX=mag_*-1;
			velocityY=0;
		} else if (rotation==180||rotation==-180) {
			velocityY=mag_;
			velocityX=0;
		} else if (rotation==90||rotation==-270) {
			velocityX=mag_;
			velocityY=0;
		}
	}
	
	public void setMaxRenderNum(int num_) {
		maxRenderNum=num_;
	}
	
	public void add(Chip chip_) {
		stack.add(chip_);
	}
	
	public void add(int position_,Chip chip_) {
		stack.add(position_, chip_);
	}
	
	public void add(int chipType_,int number_) {
		int z_=size();
		for (int i=0;i<number_;i++) {
			stack.add(new Chip(chipType_,0,0,z_+i));
		}
		setRotation(rotation);
	}
	
	public void add(int chipType_,int number_,int position_) {
		for (int i=0;i<number_;i++) {
			stack.add(position_,new Chip(chipType_,0,0,position_+i));
		}
		setRotation(rotation);
	}
	
	public Chip get(int i) {return stack.get(i);}
	
	public Chip getLast() {return get(size()-1);}
	
	public void removeLast() {
		remove(size()-1);
	}
	
	public Chip getLastRendered() {
		return stack.get(renderSize()-1);
	}
	
	public float getTopDestX() {
		float destX_=destX;
		int numTop_=renderSize();
		if (rotation==-90||rotation==270) {
			destX_+=Chip.getProjectedDelta(numTop_);
		} else if (rotation==90||rotation==-270) {
			destX_-=Chip.getProjectedDelta(numTop_);
		}
		return destX_;
	}
	
	public float getTopDestY() {
		float destY_=destY;
		int numTop_=renderSize();
		if (rotation==0||rotation==360) {
			destY_+=Chip.getProjectedDelta(numTop_);
		} else if (rotation==180||rotation==-180) {
			destY_-=Chip.getProjectedDelta(numTop_);
		}
		return destY_;
	}
	
	public void remove(int i) {
		stack.remove(i);
	}
	
	public boolean removeChipType(int chipType_,int number_) {
		boolean actionCompleted_=false;
		for (int i=size()-1;i>=0&&number_>0;i--) {
			if (get(i).chipType==chipType_) {
				remove(i);
				number_--;
			}
		}
		if (number_==0)
			actionCompleted_=true;
		
		return actionCompleted_;
	}
	
	public void clear(boolean setYtoOrgin_) {
		stack.clear();
		if (setYtoOrgin_)
			y=originY;
		velocityY=0;
		velocityX=0;
	}
	
	public int size() {return stack.size();}
	
	public int renderSize() {
		return Math.min(maxRenderNum,size());
	}
	
	public float getX() {return x;}
	public float getY() {return y;}
	public float getZ() {return z;}
	
	public float getTopX() {
		float topX_=x;
		int numTop_=renderSize();
		if (rotation==-90||rotation==270) {
			topX_+=Chip.getProjectedDelta(numTop_);
		} else if (rotation==90||rotation==-270) {
			topX_-=Chip.getProjectedDelta(numTop_);
		}
		return topX_;
	}
	public float getTopY() {
		float topY_=y;
		int numTop_=renderSize();
		if (rotation==0||rotation==360) {
			topY_+=Chip.getProjectedDelta(numTop_);
		} else if (rotation==180||rotation==-180) {
			topY_-=Chip.getProjectedDelta(numTop_);
		}
		return topY_;
	}
	
	public float getTopY(int radiusY_) {
		float topY_=y;
		int numTop_=renderSize();
		if (rotation==0||rotation==360) {
			topY_+=Chip.getProjectedDelta(numTop_,radiusY_);
		} else if (rotation==180||rotation==-180) {
			topY_-=Chip.getProjectedDelta(numTop_,radiusY_);
		}
		return topY_;
	}
	
	public void setX(float x_) {
		x=x_;
		for (int i=0;i<size();i++) {
			get(i).x=x;
			//get(i).destX=x;
		}
		totalLabel.x=getTopX();
	}
	
	public void setY(float y_) {
		y=y_;
		for (int i=0;i<size();i++) {
			get(i).y=y;
			//get(i).destY=y;
		}
		totalLabel.y=getTopY();
	}
	
	public void setZ(float z_) {
		z=z_;
		for (int i=0;i<size();i++) {
			get(i).z=z+i;
			//get(i).destZ=z+i;
		}
		totalLabel.y=getTopY();
	}
	
	public void setPosition(float x_,float y_,float z_) {
		setX(x_);
		setY(y_);
		setZ(z_);
	}
	
	public void scalePosition(float scaleX_,float scaleY_) {
		for (int chip_=0;chip_<size();chip_++) {
			get(chip_).scalePosition(scaleX_,scaleY_);
		}
		x*=scaleX_;
		y*=scaleY_;
		destX*=scaleX_;
		destY*=scaleY_;
		velocityX*=scaleX_;
		velocityY*=scaleY_;
	}
	
	public void flashXYZ() {
		setX(x);
		setY(y);
		setZ(z);
	}
	
	public void setRotation(float rotation_) {
		int numTop_=renderSize();
		float oldRotation_=rotation;
		rotation=rotation_;
		for (int i=0;i<size();i++) {
			get(i).rotation=rotation_;
		}
		if (Math.abs(rotation_-oldRotation_)==180) {
			if (rotation_==0||rotation_==360) {
				y=y-Chip.getProjectedDelta(numTop_);
			} else if (rotation_==180||rotation_==-180)  {
				y=y+Chip.getProjectedDelta(numTop_);
			} else if (rotation_==-90||rotation_==270) {
				x=x-Chip.getProjectedDelta(numTop_);
			} else if (rotation_==90||rotation_==-270) {
				x=x+Chip.getProjectedDelta(numTop_);
			}
		}
		setX(x);
		setY(y);
		setZ(z);
	}
	
	public float getRotation() {return rotation;}
	
	public void setOpacity(float o_) {
		opacity=o_;
		totalLabel.opacity=o_;
		fadeState=FADE_NONE;
	}
	
	public float getOpacity() {return opacity;}
	
	public int value() {
		int value_=0;
		for (int i=0;i<size();i++) {
			if (!get(i).pooling)
				value_+=ChipCase.values[get(i).chipType];
		}
		return value_;
	}
	
	public static int buildToValue(int[] build) {
		int value=0;
		for (int i=0;i<build.length;i++) {
			value+=build[i]*ChipCase.values[i];
		}
		return value;
	}
	
	@Override
	public String toString() {
		String str="";
		for (int i=0;i<size();i++) {
			str=str+get(i).toString();
		}
		return str;
	}
	
	public static ChipStack parseStack(String str_) {
		ChipStack stack_=new ChipStack();
		for (int i=0;i<str_.length();i+=2) {
			stack_.add(Chip.parseChip(str_.substring(i,i+2)));
		}
		return stack_;
	}
	
	public void appendStack(ChipStack stack_) {
		for (int i=0;i<stack_.size();i++) {
			if (size()==0) {
				setX(stack_.get(i).x);
				setY(stack_.get(i).y);
			}
			add(stack_.get(i));
		}
	}
	
	public void setCoordsToBottomChip() {
		if (size()>0) {
			setX(get(0).x);
			setY(get(0).y);
			setZ(0);
		}
	}
	
	public ChipStack copy() {
		ChipStack copiedStack_=new ChipStack();
		for (int i=0;i<size();i++) {
			copiedStack_.add(get(i).chipType,1);
			copiedStack_.getLast().imgRotation=get(i).imgRotation;
		}
		copiedStack_.setX(x);
		copiedStack_.setY(y);
		copiedStack_.originY=originY;
		copiedStack_.velocityY=velocityY;
		copiedStack_.maxRenderNum=maxRenderNum;
		copiedStack_.opacity=opacity;
		copiedStack_.rotation=rotation;
		
		return copiedStack_;
	}
	
	public void fadeIn(float delta) {
		opacity+=delta*2f;
		if (opacity>1)
			opacity=1;
	}
	
	public void fadeOut(float delta) {
		
		opacity-=delta*2f;
		if (opacity<0)
			opacity=0;
	}
	
	public void fadeIn() {
		fadeState=FADE_FADE_IN;
	}
	
	public void fadeOut() {
		fadeState=FADE_FADE_OUT;
	}
	
	public void animate(float delta) {
		switch (fadeState) {
		case FADE_FADE_IN:
			opacity+=delta*2f;
			if (opacity>=1) {
				opacity=1;
				fadeState=FADE_NONE;
			}
			totalLabel.opacity=opacity;
			break;
		case FADE_FADE_OUT:
			opacity-=delta*5f;
			if (opacity<=0) {
				opacity=0;
				fadeState=FADE_NONE;
			}
			totalLabel.opacity=opacity;
			break;
		}
		if (velocityX!=0) {
			setX(x+delta*velocityX);
		}
		if (velocityY!=0) {
			setY(y+delta*velocityY);
		}
	}
	
	public boolean animateOffScreen(float delta) {
		boolean sendStack_=false;
		setY(y+delta*velocityY);
		setX(x+delta*velocityX);
		if (rotation==0||rotation==360) {
			if (getLastRendered().getProjectedY()+getLastRendered().getProjectedRadiusY()<0)
				sendStack_=true;
		} else if (rotation==-90||rotation==270) {
			if (getLastRendered().getProjectedX()+getLastRendered().getProjectedRadiusY()<0)
				sendStack_=true;
		} else if (rotation==180||rotation==-180) {
			if (getLastRendered().getProjectedY()-getLastRendered().getProjectedRadiusY()>Gdx.graphics.getHeight())
				sendStack_=true;
		} else if (rotation==90||rotation==-270) {
			if (getLastRendered().getProjectedX()+getLastRendered().getProjectedRadiusY()>Gdx.graphics.getWidth())
				sendStack_=true;
		}
		return sendStack_;
	}
	
	public boolean animateToDest(float delta) {
		boolean isAtDest_=false;
		if (Math.abs(y-destY)<1&&
				Math.abs(x-destX)<1&&
				Math.abs(z-destZ)<1) {
			isAtDest_=true;
			setX(destX);
			setY(destY);
			setZ(destZ);
		} else {
			float timeFactor = delta*10;
			setY((float)(y-timeFactor*(y-destY)));
			setX((float)(x-timeFactor*(x-destX)));
			setZ((float)(z-timeFactor*(z-destZ)));
		}
		return isAtDest_;
	}

	public void setDest(float destX_,float destY_,float destZ_) {
		destX=destX_;
		destY=destY_;
		destZ=destZ_;
	}

	public int countChipType(int chipType_) {
		int num_=0;
		for (int i=0;i<size();i++) {
			if (get(i).chipType==chipType_) {
				num_++;
			}
		}
		return num_;
	}
	
	public boolean changeDown(int chipType_) {
		boolean changed_=false;
		for (int i=size()-1;i>=0;i--) {
			if (get(i).chipType==chipType_) {
				changed_=true;
				remove(i);
				int changeNum_=ChipCase.values[chipType_]/ChipCase.values[chipType_-1];
				add(chipType_-1,changeNum_,i);
				break;
			}
		}
		return changed_;
	}
	
	public boolean pointContained(float x_,float y_) {
		boolean isContained_=false;
		
		if (getLastRendered().pointContained(x_, y_)) {
			isContained_=true;
		}
		if (get(0).pointContained(x_, y_)) {
			isContained_=true;
		}
		
		if (Math.abs(x_-x)<getLastRendered().getProjectedRadiusX()&&
				y_>=y&&y_<=getLastRendered().getProjectedY()) {
			isContained_=true;
		}
		
		return isContained_;
	}

	public float getYMidpoint() {
		float midpoint_=0;
		int numTop_=renderSize();
		if (rotation==0||rotation==360||rotation==180||rotation==-180) {
			midpoint_=y;
		} else if (rotation==-90||rotation==270) {
			midpoint_=y+Chip.getProjectedDelta(numTop_)*0.5f;
		} else if (rotation==90||rotation==-270) {
			midpoint_=y-Chip.getProjectedDelta(numTop_)*0.5f;
		}
		return midpoint_;
	}
	
	public float getXMidpoint() {
		float midpoint_=0;
		int numTop_=renderSize();
		if (rotation==0||rotation==360||rotation==180||rotation==-180) {
			midpoint_=x;
		} else if (rotation==-90||rotation==270) {
			midpoint_=x+Chip.getProjectedDelta(numTop_)*0.5f;
		} else if (rotation==90||rotation==-270) {
			midpoint_=x-Chip.getProjectedDelta(numTop_)*0.5f;
		}
		return midpoint_;
	}

	public boolean wasFlung() {
		return (velocityX!=0||velocityY!=0);
	}
	
	public void setTouched(boolean isTouched,float touchDownX_,float touchDownY_) {
		this.isTouched = isTouched;
		touchDownX=touchDownX_;
		touchDownY=touchDownY_;
	}
	
	public void touchDragged(float touchDraggedX_,float touchDraggedY_) {
		touchDraggedX=touchDraggedX_;
		touchDraggedY=touchDraggedY_;
	}

	public boolean hasNonPoolingChips() {
		boolean result_=false;
		for (int i=0;i<size();i++) {
			if (!get(i).pooling)
				result_=true;
		}
		return result_;
	}

	public void buildStackFrom(int[] build_) {
		for (int chip_=ChipCase.CHIP_TYPES-1;chip_>=0;chip_--) {
			add(chip_,build_[chip_]);
		}
	}
	
	public boolean pastMax() {
		return (size()>maxRenderNum);
	}

	public Vector2 getTopPixel() {
		Vector2 topPixel_=new Vector2();
		topPixel_.x=(float) (x-Math.sin(Math.toRadians(rotation))*(Chip.getProjectedDelta(renderSize())+
				Chip.getProjectedRadiusY(renderSize())));
		topPixel_.y=(float) (y+Math.cos(Math.toRadians(rotation))*(Chip.getProjectedDelta(renderSize())+
													Chip.getProjectedRadiusY(renderSize())));
		
		return topPixel_;
	}

	


}
