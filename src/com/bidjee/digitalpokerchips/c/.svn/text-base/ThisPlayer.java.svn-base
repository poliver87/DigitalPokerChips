package com.bidjee.digitalpokerchips.c;

import java.util.ArrayList;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.math.Vector2;
import com.bidjee.digitalpokerchips.i.IPlayerNetwork;
import com.bidjee.digitalpokerchips.m.Button;
import com.bidjee.digitalpokerchips.m.Chip;
import com.bidjee.digitalpokerchips.m.ChipCase;
import com.bidjee.digitalpokerchips.m.ChipStack;
import com.bidjee.digitalpokerchips.m.DPCSprite;
import com.bidjee.digitalpokerchips.m.DiscoveredTable;
import com.bidjee.digitalpokerchips.m.GameLogic;
import com.bidjee.digitalpokerchips.m.PlayerEntry;
import com.bidjee.digitalpokerchips.m.TextField;
import com.bidjee.digitalpokerchips.m.TextLabel;

public class ThisPlayer {
	//////////////////// Constants ////////////////////
	static final int[] defaultChipNums={8,4,2};
	
	public static final int DURATION_SEARCH_HOLDOFF = 2000;
	
	public static final int CONN_NONE = 0;
	public static final int CONN_IDLE = 1;
	public static final int CONN_SEARCHING = 2;
	public static final int CONN_BUYIN = 3;
	public static final int CONN_CONNECTING = 4;
	public static final int CONN_CONNECTED = 5;
	public static final int CONN_SEARCH_HOLDOFF = 6;
	
	//////////////////// State Variables ////////////////////
	public boolean sendingJoinToken;
	public boolean showStackTotals;
	private int connectivityStatus;
	public boolean wifiEnabled;
	public String tableName;
	public int color;
	public int[] chipNumbers;
	public boolean isDealer;
	private int searchHoldoffTimer;
	public int stake;
	public boolean betEnabled;
	public boolean waitingOnHost;
	public boolean checkEnabled;
	public boolean foldEnabled;
		
	//////////////////// Screen Scale & Layout ////////////////////
	float limYBetStackTop;
	float limYBetStackBottom;
	float limYBetStackCancel;
	Vector2 joinTokenStart=new Vector2();
	Vector2 joinTokenStop=new Vector2();
	Vector2 winStackOrigin=new Vector2();
	float yDealerButtonOffscreen;
	float yDealerButtonOnscreen;
	
	//////////////////// Models ////////////////////
	public DiscoveredTable connectingTable;
	public DPCSprite plaque=new DPCSprite();
	public DPCSprite joinToken=new DPCSprite();
	public ChipStack[] mainStacks;
	public ChipStack bettingStack;
	public ChipStack betStack;
	public ChipStack cancellingStack;
	public ChipStack cancelStack;
	public Chip pickedUpChip;
	public DPCSprite connectionBlob=new DPCSprite();
	public DPCSprite dealerButton=new DPCSprite();
	public Button checkButton;
	
	//////////////////// Text Labels ////////////////////
	public TextField nameField;
	
	//////////////////// References ////////////////////
	WorldLayer mWL;
	IPlayerNetwork networkInterface;
	
	public ThisPlayer(WorldLayer mWL,IPlayerNetwork networkInterface) {
		this.mWL=mWL;
		this.networkInterface=networkInterface;
		networkInterface.setPlayer(this);
		showStackTotals=false;
		joinToken.opacity=0;
		mainStacks=new ChipStack[ChipCase.CHIP_TYPES];
		for (int chip_=ChipCase.CHIP_A;chip_<ChipCase.CHIP_TYPES;chip_++) {
			mainStacks[chip_]=new ChipStack();
			mainStacks[chip_].add(chip_,defaultChipNums[chip_]);
		}
		bettingStack=new ChipStack();
		betStack=new ChipStack();
		cancellingStack=new ChipStack();
		cancelStack=new ChipStack();
		pickedUpChip=null;
		nameField=new TextField("",0,false,false);
		nameField.label=new TextLabel("",0.01f,true,1,false);
		connectionBlob.opacity=0;
		connectionBlob.flashVisibleTime=100;
		connectionBlob.flashInvisibleTime=0;
		connectionBlob.setFadeInSpeed(1);
		connectionBlob.setFadeOutSpeed(3);
		dealerButton.opacity=0;
		checkButton=new Button(true,0,"");
		tableName="";
		
	}
	
	//////////////////// Scale & Layout ////////////////////
	public void setDimensions(float worldWidth_,float worldHeight_) {
		plaque.setDimensions((int)(worldWidth_*0.044f),(int)(worldHeight_*0.03f));
		joinToken.setDimensions((int)(worldHeight_*0.0288f),(int)(worldHeight_*0.0288f));
		nameField.setDimensions((int)(plaque.radiusX*0.8f),(int)(plaque.radiusY*0.9f));
		String tmp_=nameField.label.getText();
		nameField.label.setText(WorldLayer.NAME_MEASURE);
		nameField.label.setTextSizeToMax();
		nameField.label.setText(tmp_);
		mainStacks[ChipCase.CHIP_A].setMaxRenderNum(20);
		mainStacks[ChipCase.CHIP_A].scaleLabel();
		mainStacks[ChipCase.CHIP_B].setMaxRenderNum(20);
		mainStacks[ChipCase.CHIP_B].scaleLabel();
		mainStacks[ChipCase.CHIP_C].setMaxRenderNum(20);
		mainStacks[ChipCase.CHIP_C].scaleLabel();
		betStack.setMaxRenderNum(20);
		betStack.scaleLabel();
		connectionBlob.setDimensions((int)(worldHeight_*0.08f),(int)(worldHeight_*0.024f));
		dealerButton.setDimensions((int)(worldHeight_*0.022f),(int)(worldHeight_*0.022f));
		checkButton.setDimensions((int)(worldHeight_*0.1f),(int)(worldHeight_*0.04f));
	} // setDimensions(float width_,float height_)
	
	public void setPositions(float worldWidth_,float worldHeight_) {
		plaque.setPosition(worldWidth_*0.5f,worldHeight_*0.165f);
		joinToken.setPosition(worldWidth_*0.5f,worldHeight_*0.4f);
		nameField.setPosition(plaque.x,plaque.y);
		mainStacks[ChipCase.CHIP_A].setY(worldHeight_*0.25f);
		mainStacks[ChipCase.CHIP_B].setY(mainStacks[ChipCase.CHIP_A].getY());
		mainStacks[ChipCase.CHIP_C].setY(mainStacks[ChipCase.CHIP_A].getY());
		mainStacks[ChipCase.CHIP_A].setOriginY(mainStacks[ChipCase.CHIP_A].getY());
		mainStacks[ChipCase.CHIP_B].setOriginY(mainStacks[ChipCase.CHIP_B].getY());
		mainStacks[ChipCase.CHIP_C].setOriginY(mainStacks[ChipCase.CHIP_C].getY());
		mainStacks[ChipCase.CHIP_A].setX(worldWidth_*0.43f);
		mainStacks[ChipCase.CHIP_B].setX(worldWidth_*0.5f);
		mainStacks[ChipCase.CHIP_C].setX(worldWidth_*0.57f);
		limYBetStackTop=mWL.camPosPlayer.getY()+mWL.worldRenderer.screenHeight*0.5f;
		limYBetStackBottom=mainStacks[ChipCase.CHIP_B].getY()+Chip.radiusY*2f;
		limYBetStackCancel=limYBetStackBottom+Chip.radiusY*0.2f;
		betStack.setOriginY(limYBetStackCancel+Chip.radiusY);
		betStack.setPosition(worldWidth_*0.5f,betStack.originY,0);
		joinTokenStop.set(worldWidth_*0.5f,worldHeight_*0.5f);
		joinTokenStart.set(worldWidth_*0.5f,worldHeight_*0.38f);
		winStackOrigin.set(worldWidth_*0.5f,worldHeight_*0.63f);
		connectionBlob.setPosition(worldWidth_*0.5f,worldHeight_*0.425f);
		yDealerButtonOffscreen=worldHeight_*0.5f;
		yDealerButtonOnscreen=worldHeight_*0.25f;
		dealerButton.setPosition(worldWidth_*0.39f,yDealerButtonOffscreen);
		checkButton.setPosition(worldWidth_*0.5f,worldHeight_*0.35f);
	} // setPositions(float width_,float height_)
	
	public void scalePositions(float scaleX_,float scaleY_) {
		plaque.scalePosition(scaleX_,scaleY_);
		nameField.scalePosition(scaleX_,scaleY_);
		mainStacks[ChipCase.CHIP_A].scalePosition(scaleX_,scaleY_);
		mainStacks[ChipCase.CHIP_B].scalePosition(scaleX_,scaleY_);
		mainStacks[ChipCase.CHIP_C].scalePosition(scaleX_,scaleY_);
		betStack.scaleOriginY(scaleY_);
		betStack.scalePosition(scaleX_,scaleY_);
		if (pickedUpChip!=null) {pickedUpChip.scalePosition(scaleX_,scaleY_);}
		if (bettingStack.size()>0) {bettingStack.scalePosition(scaleX_,scaleY_);}
		if (cancellingStack.size()>0) {cancellingStack.scalePosition(scaleX_,scaleY_);}
		if (cancelStack.size()>0) {cancelStack.scalePosition(scaleX_,scaleY_);}
		connectionBlob.scalePosition(scaleX_,scaleY_);
	} // scalePositions(float scaleX_,float scaleY_)
	
	//////////////////// Controllers ////////////////////
	public void controlLogic() {
		
	}
	
	public void animate(float delta) {
		if (connectivityStatus==CONN_SEARCH_HOLDOFF) {
			searchHoldoffTimer+=delta*1000;
			if (searchHoldoffTimer>DURATION_SEARCH_HOLDOFF) {
				notifyReadyToSearch();
			}
		}
		joinToken.animate(delta);
		connectionBlob.animate(delta);
		checkButton.animate(delta);
		if (sendingJoinToken) {
			if (Math.abs(joinToken.y-joinTokenStop.y)<2) {
				
			} else {
				float deltaY_=delta*4*(joinToken.y-joinTokenStop.y);
				joinToken.y-=deltaY_;
			}
		}
		
		if (isDealer) {
			if (Math.abs(dealerButton.y-yDealerButtonOnscreen)<2) {
				;
			} else {
				float deltaY_=delta*5*(yDealerButtonOnscreen-dealerButton.y);
				dealerButton.y+=deltaY_;
			}
		} else {
			if (Math.abs(dealerButton.y-yDealerButtonOffscreen)<2) {
				;
			} else {
				float deltaY_=delta*5*(yDealerButtonOffscreen-dealerButton.y);
				dealerButton.y+=deltaY_;
			}
		}
		
		if (cancelStack.size()>0) {
			boolean allArrived_=true;
			for (int i=0;i<cancelStack.size();i++) {
				if (!cancelStack.get(i).animateToDest(delta)) {
					allArrived_=false;
				}
			}
			if (allArrived_) {
				for (int i=0;i<cancelStack.size();i++) {
					mainStacks[cancelStack.get(0).chipType].add(cancelStack.get(0));
					cancelStack.remove(0);
					i--;
				}
				updateStackTotals();
			}
			
		}
		if (cancellingStack.size()>0) {
			boolean allArrived=true;
			for (int i=0;i<cancellingStack.size();i++) {
				if (!cancellingStack.get(i).isAtDest) {
					cancellingStack.get(i).animateToDest(delta);
					allArrived=false;
				}
			}
			if (allArrived) {
				int[] chipCount={0,0,0};
				for (int i=0;i<cancellingStack.size();i++) {
					cancellingStack.get(i).setDest(mainStacks[cancellingStack.get(i).chipType].getX(),
							mainStacks[cancellingStack.get(i).chipType].getY(),
							mainStacks[cancellingStack.get(i).chipType].renderSize()+
							chipCount[cancellingStack.get(i).chipType]);
					chipCount[cancellingStack.get(i).chipType]++;
					cancelStack.add(cancellingStack.get(i));
				}
				cancellingStack.clear(true);
			}
			
		}
		for (int i=0;i<bettingStack.size();i++) {
			if (bettingStack.get(i).animateToDest(delta)) {
				if (i==0) {
					betStack.add(bettingStack.get(i));bettingStack.remove(i);
					i--;
					betStack.updateTotalLabel();
				}
			}
			
		}
		if (pickedUpChip!=null) {
			if (pickedUpChip.animateToDest(delta)&&!pickedUpChip.isTouched) {
				mainStacks[pickedUpChip.chipType].add(pickedUpChip);
				updateStackTotals();
				pickedUpChip=null;
			}
		}
		
		// animate flung bet stack
		if (betStack.velocityY!=0) {
			betStack.setY(betStack.getY()+delta*betStack.velocityY);
		}
		
		for (int stack_=0;stack_<ChipCase.CHIP_TYPES;stack_++) {
			mainStacks[stack_].animate(delta);
		}
		betStack.animate(delta);
		bettingStack.animate(delta);
		cancellingStack.animate(delta);
		cancelStack.animate(delta);
	} // animate(float delta)
	
	public void collisionDetector() {
		if (sendingJoinToken) {
			if (joinToken.y>=limYBetStackTop) {
				joinToken.opacity=0;
				sendingJoinToken=false;
				connectivityStatus=CONN_CONNECTING;
				networkInterface.requestConnect(connectingTable,mWL.game.calculateAzimuth(),chipNumbers);
			}
		}
		if (betStack.size()>0) {
			if (betStack.getY()>=limYBetStackTop) {
				if ((betEnabled)&&!waitingOnHost&&(betStack.value()>=stake||isAllIn())) {
					if (betStack.getY()>limYBetStackTop) {
						submitBet();
					}
				} else {
					betStack.setY(limYBetStackTop);
					betStack.setVelocityY(0);
				}
			} else if (betStack.getY()<limYBetStackBottom) {
				betStack.setY(limYBetStackBottom);
				betStack.setVelocityY(0);
			}
			if (betStack.getY()<limYBetStackCancel&&!betStack.get(0).isTouched) {
				initiateCancelBet();
			}
		}
		if (pickedUpChip!=null) {
			float xPUC_=pickedUpChip.x;
			float yPUC_=pickedUpChip.getProjectedY();
			float radiusXPUC_=pickedUpChip.getProjectedRadiusX();
			float radiusYPUC_=pickedUpChip.getProjectedRadiusY();
			boolean[] collidedWith_=new boolean[ChipCase.CHIP_TYPES];
			boolean[] over_=new boolean[ChipCase.CHIP_TYPES];
			boolean[] changeAvailable_=new boolean[ChipCase.CHIP_TYPES];
			boolean[] makeChange_=new boolean[ChipCase.CHIP_TYPES];
			// check for change available
			if (pickedUpChip.chipType==ChipCase.CHIP_A) {
				if (mainStacks[ChipCase.CHIP_A].size()+1>=ChipCase.values[ChipCase.CHIP_B]/ChipCase.values[ChipCase.CHIP_A]) {
					changeAvailable_[ChipCase.CHIP_B]=true;
				}
			} else if (pickedUpChip.chipType==ChipCase.CHIP_B) {
				changeAvailable_[ChipCase.CHIP_A]=true;
				if (mainStacks[ChipCase.CHIP_B].size()+1>=ChipCase.values[ChipCase.CHIP_C]/ChipCase.values[ChipCase.CHIP_B]) {
					changeAvailable_[ChipCase.CHIP_C]=true;
				}
			} else if (pickedUpChip.chipType==ChipCase.CHIP_C) {
				changeAvailable_[ChipCase.CHIP_B]=true;
			}
			// check for collision with stack A
			int chipA_=0;
			float xA_=mainStacks[ChipCase.CHIP_A].getX();
			float yA_=mainStacks[ChipCase.CHIP_A].getY();
			int radiusXA_=Chip.radiusX;
			int radiusYA_=Chip.radiusY;
			float dyA_=0;
			if (pickedUpChip.chipType!=ChipCase.CHIP_A) {
				if (mainStacks[ChipCase.CHIP_A].size()>0) {
					chipA_=(int) Math.min(mainStacks[ChipCase.CHIP_A].renderSize()-1,pickedUpChip.z);
					yA_=mainStacks[ChipCase.CHIP_A].get(chipA_).getProjectedY();
					radiusXA_=mainStacks[ChipCase.CHIP_A].get(chipA_).getProjectedRadiusX();
					radiusYA_=(int) (mainStacks[ChipCase.CHIP_A].get(chipA_).getProjectedRadiusY()*(1-Chip.Z_Y_OFFSET_RATIO));
				}
				if (Math.abs(xPUC_-xA_)<radiusXPUC_+radiusXA_) {
					float dxA1_=Math.abs(xPUC_-xA_)*radiusXA_/(radiusXA_+radiusXPUC_);
					float dyA1_=(float) (Math.sqrt(((radiusXA_*radiusXA_-dxA1_*dxA1_)*radiusYA_*radiusYA_)/(radiusXA_*radiusXA_)));
					float dyA2_=dyA1_*(radiusYPUC_/radiusYA_);
					dyA_=dyA1_+dyA2_;
					if (pickedUpChip.collisionCoeff==0) {
						if (yPUC_>=yA_-dyA_&&yPUC_<=yA_+dyA_) {
							collidedWith_[ChipCase.CHIP_A]=true;
						}
					} else if (pickedUpChip.collisionCoeff==-1) {
						if (yPUC_>=yA_-dyA_) {
							collidedWith_[ChipCase.CHIP_A]=true;
						}
					} else if (pickedUpChip.collisionCoeff==1) {
						if (yPUC_<=yA_+dyA_) {
							collidedWith_[ChipCase.CHIP_A]=true;
						}
					}
					if (collidedWith_[ChipCase.CHIP_A]&&mainStacks[ChipCase.CHIP_A].renderSize()<=pickedUpChip.z) {
						collidedWith_[ChipCase.CHIP_A]=false;
						over_[ChipCase.CHIP_A]=true;
					}
				}
			}
			// check for collision with stack B
			int chipB_=0;
			float xB_=mainStacks[ChipCase.CHIP_B].getX();
			float yB_=mainStacks[ChipCase.CHIP_B].getY();
			int radiusXB_=Chip.radiusX;
			int radiusYB_=Chip.radiusY;
			float dyB_=0;
			if (pickedUpChip.chipType!=ChipCase.CHIP_B) {
				if (mainStacks[ChipCase.CHIP_B].size()>0) {
					chipB_=(int) Math.min(mainStacks[ChipCase.CHIP_B].renderSize()-1,pickedUpChip.z);
					xB_=mainStacks[ChipCase.CHIP_B].getX();
					yB_=mainStacks[ChipCase.CHIP_B].get(chipB_).getProjectedY();
					radiusXB_=mainStacks[ChipCase.CHIP_B].get(chipB_).getProjectedRadiusX();
					radiusYB_=(int) (mainStacks[ChipCase.CHIP_B].get(chipB_).getProjectedRadiusY()*(1-Chip.Z_Y_OFFSET_RATIO));
				}
				if (Math.abs(xPUC_-xB_)<radiusXPUC_+radiusXB_) {
					float dxB1_=Math.abs(xPUC_-xB_)*radiusXB_/(radiusXB_+radiusXPUC_);
					float dyB1_=(float) (Math.sqrt(((radiusXB_*radiusXB_-dxB1_*dxB1_)*radiusYB_*radiusYB_)/(radiusXB_*radiusXB_)));
					float dyB2_=dyB1_*(radiusYPUC_/radiusYB_);
					dyB_=dyB1_+dyB2_;
					if (pickedUpChip.collisionCoeff==0) {
						if (yPUC_>=yB_-dyB_&&yPUC_<=yB_+dyB_) {
							collidedWith_[ChipCase.CHIP_B]=true;
						}
					} else if (pickedUpChip.collisionCoeff==-1) {
						if (yPUC_>=yB_-dyB_) {
							collidedWith_[ChipCase.CHIP_B]=true;
						}
					} else if (pickedUpChip.collisionCoeff==1) {
						if (yPUC_<=yB_+dyB_) {
							collidedWith_[ChipCase.CHIP_B]=true;
						}
					}
					if (collidedWith_[ChipCase.CHIP_B]&&mainStacks[ChipCase.CHIP_B].renderSize()<=pickedUpChip.z) {
						collidedWith_[ChipCase.CHIP_B]=false;
						over_[ChipCase.CHIP_B]=true;
					}
				}
			}
			// check for collision with stack C
			int chipC_=0;
			float xC_=mainStacks[ChipCase.CHIP_C].getX();
			float yC_=mainStacks[ChipCase.CHIP_C].getY();
			int radiusXC_=Chip.radiusX;
			int radiusYC_=Chip.radiusY;
			float dyC_=0;
			if (pickedUpChip.chipType!=ChipCase.CHIP_C) {
				if (mainStacks[ChipCase.CHIP_C].size()>0) {
					chipC_=(int) Math.min(mainStacks[ChipCase.CHIP_C].renderSize()-1,pickedUpChip.z);
					xC_=mainStacks[ChipCase.CHIP_C].getX();
					yC_=mainStacks[ChipCase.CHIP_C].get(chipC_).getProjectedY();
					radiusXC_=mainStacks[ChipCase.CHIP_C].get(chipC_).getProjectedRadiusX();
					radiusYC_=(int) (mainStacks[ChipCase.CHIP_C].get(chipC_).getProjectedRadiusY()*(1-Chip.Z_Y_OFFSET_RATIO));
				}
				if (Math.abs(xPUC_-xC_)<radiusXPUC_+radiusXC_) {
					float dxC1_=Math.abs(xPUC_-xC_)*radiusXC_/(radiusXC_+radiusXPUC_);
					float dyC1_=(float) (Math.sqrt(((radiusXC_*radiusXC_-dxC1_*dxC1_)*radiusYC_*radiusYC_)/(radiusXC_*radiusXC_)));
					float dyC2_=dyC1_*(radiusYPUC_/radiusYC_);
					dyC_=dyC1_+dyC2_;
					if (pickedUpChip.collisionCoeff==0) {
						if (yPUC_>=yC_-dyC_&&yPUC_<=yC_+dyC_) {
							collidedWith_[ChipCase.CHIP_C]=true;
						}
					} else if (pickedUpChip.collisionCoeff==-1) {
						if (yPUC_>=yC_-dyC_) {
							collidedWith_[ChipCase.CHIP_C]=true;
						}
					} else if (pickedUpChip.collisionCoeff==1) {
						if (yPUC_<=yC_+dyC_) {
							collidedWith_[ChipCase.CHIP_C]=true;
						}
					}
					if (collidedWith_[ChipCase.CHIP_C]&&mainStacks[ChipCase.CHIP_C].renderSize()<=pickedUpChip.z) {
						collidedWith_[ChipCase.CHIP_C]=false;
						over_[ChipCase.CHIP_C]=true;
					}
				}
			}
			// sort out bet or change if needed
			if (pickedUpChip.isTouched) {
				makeChange_[ChipCase.CHIP_A]=(collidedWith_[ChipCase.CHIP_A]||over_[ChipCase.CHIP_A])&&changeAvailable_[ChipCase.CHIP_A];
				makeChange_[ChipCase.CHIP_B]=(collidedWith_[ChipCase.CHIP_B]||over_[ChipCase.CHIP_B])&&changeAvailable_[ChipCase.CHIP_B];
				makeChange_[ChipCase.CHIP_C]=(collidedWith_[ChipCase.CHIP_C]||over_[ChipCase.CHIP_C])&&changeAvailable_[ChipCase.CHIP_C];
				if (makeChange_[ChipCase.CHIP_A]) {
					int numToGain_=ChipCase.values[pickedUpChip.chipType]/ChipCase.values[ChipCase.CHIP_A];
					mainStacks[ChipCase.CHIP_A].add(ChipCase.CHIP_A,numToGain_);
					mWL.soundFX.changeSound.play();
					pickedUpChip=null;
					updateStackTotals();
				} else if (makeChange_[ChipCase.CHIP_B]) {
					int numToGain_=Math.max(1,ChipCase.values[pickedUpChip.chipType]/ChipCase.values[ChipCase.CHIP_B]);
					int numToLose_=Math.max(0,ChipCase.values[ChipCase.CHIP_B]/ChipCase.values[pickedUpChip.chipType]-1);
					mainStacks[ChipCase.CHIP_B].add(ChipCase.CHIP_B,numToGain_);
					mainStacks[pickedUpChip.chipType].removeChipType(pickedUpChip.chipType,numToLose_);
					mWL.soundFX.changeSound.play();
					pickedUpChip=null;
					updateStackTotals();
				} else if (makeChange_[ChipCase.CHIP_C]) {
					int numToGain_=1;
					int numToLose_=ChipCase.values[ChipCase.CHIP_C]/ChipCase.values[ChipCase.CHIP_B]-1;
					mainStacks[ChipCase.CHIP_C].add(ChipCase.CHIP_C,numToGain_);
					mainStacks[pickedUpChip.chipType].removeChipType(pickedUpChip.chipType,numToLose_);
					mWL.soundFX.changeSound.play();
					pickedUpChip=null;
					updateStackTotals();
				}
			}
			// do collision detection if no change made
			if (pickedUpChip!=null) {
				// resolve if two collisions were made
				if (collidedWith_[ChipCase.CHIP_A]&&collidedWith_[ChipCase.CHIP_B]) {
					collidedWith_[ChipCase.CHIP_A]=xPUC_<=0.5f*(xA_+xB_);
					collidedWith_[ChipCase.CHIP_B]=!collidedWith_[ChipCase.CHIP_A];
				} else if (collidedWith_[ChipCase.CHIP_C]&&collidedWith_[ChipCase.CHIP_B]) {
					collidedWith_[ChipCase.CHIP_B]=xPUC_<=0.5f*(xC_+xB_);
					collidedWith_[ChipCase.CHIP_C]=!collidedWith_[ChipCase.CHIP_B];
				}
				
				if (collidedWith_[ChipCase.CHIP_A]) {
					if (pickedUpChip.collisionCoeff==0) {
						if (yPUC_<yA_) {
							pickedUpChip.collisionCoeff=-1;
						} else {
							pickedUpChip.collisionCoeff=1;
						}
					}
					pickedUpChip.setProjectedY(yA_+pickedUpChip.collisionCoeff*dyA_);
				} else if (collidedWith_[ChipCase.CHIP_B]) {
					if (pickedUpChip.collisionCoeff==0) {
						if (yPUC_<yB_) {
							pickedUpChip.collisionCoeff=-1;
						} else {
							pickedUpChip.collisionCoeff=1;
						}
					}
					pickedUpChip.setProjectedY(yB_+pickedUpChip.collisionCoeff*dyB_);
				} else if (collidedWith_[ChipCase.CHIP_C]) {
					if (pickedUpChip.collisionCoeff==0) {
						if (yPUC_<yC_) {
							pickedUpChip.collisionCoeff=-1;
						} else {
							pickedUpChip.collisionCoeff=1;
						}
					}
					pickedUpChip.setProjectedY(yC_+pickedUpChip.collisionCoeff*dyC_);
				}
				// reset collision 
				if (pickedUpChip.collisionCoeff==-1&&pickedUpChip.y>mainStacks[ChipCase.CHIP_A].getY()) {
					pickedUpChip.collisionCoeff=0;
				} else if (pickedUpChip.collisionCoeff==1&&pickedUpChip.y<mainStacks[ChipCase.CHIP_A].getY()) {
					pickedUpChip.collisionCoeff=0;
				}
			}
		} // if (pickedUpChip!=null)
	} // collisionDetector()
	
	//////////////////// Internal Methods ////////////////////
	private void updateStackTotals() {
		for (int chip_=ChipCase.CHIP_A;chip_<ChipCase.CHIP_TYPES;chip_++) {
			mainStacks[chip_].updateTotalLabel();
		}
	}
	
	private boolean isAllIn() {
		return ((mainStacks[ChipCase.CHIP_A].size()==0)&&
				(mainStacks[ChipCase.CHIP_B].size()==0)&&
				(mainStacks[ChipCase.CHIP_C].size()==0));
	}
	
	private void initiateCancelBet() {
		int[] chipCount={0,0,0};
		float[] ys_=new float[ChipCase.CHIP_TYPES];
		for (int i=0;i<ChipCase.CHIP_TYPES;i++) {
			if (mainStacks[i].size()>0) {
				ys_[i]=mainStacks[i].getY()+mainStacks[i].getLastRendered().getProjectedRadiusY()*2;
			} else {
				ys_[i]=mainStacks[i].getY()+Chip.radiusY*2;
			}
		}
		for (Chip chip : betStack.stack) {
			chip.setDest(mainStacks[chip.chipType].getX(),
					ys_[chip.chipType],
					mainStacks[chip.chipType].renderSize()+chipCount[chip.chipType]);
			chipCount[chip.chipType]++;
			cancellingStack.add(chip);
		}
		betStack.clear(true);
		if (foldEnabled) {
			mWL.game.mFL.foldButton.fadeIn();
			mWL.game.mFL.foldButton.setTouchable(true);
		}
		if (checkEnabled) {
			checkButton.fadeIn();
			checkButton.setTouchable(true);
		}
	}
	
	private void removeLastFromMainStack(int chip_) {
		mainStacks[chip_].removeLast();
		updateStackTotals();
	}
	
	private void addBetChip(Chip chip) {
		int numTop_=Math.min(betStack.size()+bettingStack.size(),betStack.maxRenderNum);
		chip.setDest(betStack.getX(),betStack.getY(),numTop_);
		bettingStack.add(chip);
		checkButton.fadeOut();
		checkButton.setTouchable(false);
		mWL.game.mFL.foldButton.fadeOut();
		mWL.game.mFL.foldButton.setTouchable(false);
	}
	
	private void enableBet() {
		betEnabled=true;
	}
	private void disableBet() {
		betEnabled=false;
	}
	private void enableCheck() {
		checkEnabled=true;
		checkButton.fadeIn();
		checkButton.setTouchable(true);
	}
	private void disableCheck() {
		checkEnabled=false;
		checkButton.fadeOut();
		checkButton.setTouchable(false);
	}
	private void enableFold() {
		foldEnabled=true;
		mWL.game.mFL.foldButton.fadeIn();
		mWL.game.mFL.foldButton.setTouchable(true);
	}
	private void disableFold() {
		foldEnabled=false;
		mWL.game.mFL.foldButton.fadeOut();
		mWL.game.mFL.foldButton.setTouchable(false);
	}
	
	private void notifyTableDisconnected() {
		cancelMoveState();
		setDealer(false);
		waitingOnHost=false;
		mWL.game.mFL.reconnect1Label.fadeOut();
		mWL.game.mFL.reconnect1Label.opacity=0;
		mWL.game.mFL.reconnect2Label.fadeOut();
		mWL.game.mFL.reconnect2Label.opacity=0;
		mWL.game.mFL.tableStatusMenu.remove();
		mWL.game.mFL.stopWaitNextHand();
		Gdx.app.log("A", "notifyGameDisconnected");
	}
	
	private void cancelMoveState() {
		mWL.game.mFL.stateChangeACKed();
		connectionBlob.fadeOut();
		connectionBlob.opacity=0;
		disableBet();
		disableCheck();
		disableFold();
		mWL.game.mFL.hideTextMessage();
	}
	
	private void clearAllStacks() {
		mainStacks[ChipCase.CHIP_A].clear(true);
		mainStacks[ChipCase.CHIP_B].clear(true);
		mainStacks[ChipCase.CHIP_C].clear(true);
		betStack.clear(true);
		bettingStack.clear(true);
		cancellingStack.clear(true);
		cancelStack.clear(true);
		pickedUpChip=null;
	}
	
	//////////////////// Input to Player Messages ////////////////////
	public void nameDone() {
		if (nameField.label.getText().equals("")) {
			int num_=(int) (Math.random()*9+1);
			nameField.setText("Player "+num_);
			networkInterface.setName(nameField.getText());
		}
		mWL.sendCameraTo(mWL.camPosPlayer);
	}
	
	public void plaqueTouched() {
		if (connectivityStatus==CONN_SEARCHING) {
			stopSearchForGames();
		}
		mWL.sendCameraTo(mWL.camPosPlayersName);
	}
	
	public void buyinDialogDone(int[] chipNumbers) {
		mWL.game.mFL.stopBuyin();
		if (chipNumbers!=null) {
			sendJoinToken(chipNumbers);
		} else {
			joinToken.fadeOut();
			joinToken.opacity=0;
			searchHolddoff();
		}
	}
	
	public void searchingAnimationClicked() {
		mWL.game.mFL.startManualConnectDialog();
	}
	
	public void manualConnectDialogDone(boolean actionCompleted) {
		mWL.game.mFL.stopManualConnectDialog();
		byte[] hostBytes=mWL.game.mFL.manualConnectDialog.getHostBytes();
		if (actionCompleted&&hostBytes!=null) {
			networkInterface.requestInvitation(hostBytes);
		}
	}
	
	public void leaveButtonPressed() {
		doLeaveDialog();
	}
	
	public void doPickedUpChipDropped() {
		boolean isBet_=true;
		float xPUC_=pickedUpChip.x;
		float yPUC_=pickedUpChip.getProjectedY();
		float radiusXPUC_=pickedUpChip.getProjectedRadiusX();
		float radiusYPUC_=pickedUpChip.getProjectedRadiusY();
		
		float left_=mainStacks[ChipCase.CHIP_A].getX();
		float right_=mainStacks[ChipCase.CHIP_C].getX();
		float bottom_=limYBetStackBottom;
		
		if (xPUC_<left_||xPUC_>right_||yPUC_<bottom_) {
			isBet_=false;
		} else {
			// check if over stacks
			for (int chipType_=0;chipType_<ChipCase.CHIP_TYPES;chipType_++) {
				if (mainStacks[chipType_].renderSize()<=pickedUpChip.z&&mainStacks[chipType_].size()>0) {
					int chip_=mainStacks[chipType_].renderSize()-1;
					float x_=mainStacks[chipType_].getX();
					float y_=mainStacks[chipType_].get(chip_).getProjectedY();
					int radiusX_=mainStacks[chipType_].get(chip_).getProjectedRadiusX();
					int radiusY_=mainStacks[chipType_].get(chip_).getProjectedRadiusY();
					if (Math.abs(xPUC_-x_)<radiusXPUC_+radiusX_) {
						float dx1_=Math.abs(xPUC_-x_)*radiusX_/(radiusX_+radiusXPUC_);
						float dy1_=(float) (Math.sqrt(((radiusX_*radiusX_-dx1_*dx1_)*radiusY_*radiusY_)/(radiusX_*radiusX_)));
						float dy2_=dy1_*(radiusYPUC_/radiusY_);
						float dy_=dy1_+dy2_;
						if (yPUC_>=y_-dy_&&yPUC_<=y_+dy_) {
							isBet_=false;
						}
					}
				}
			}
		}
		if (isBet_) {
			addBetChip(pickedUpChip);
			pickedUpChip=null;
		} else {
			float destZ_=mainStacks[pickedUpChip.chipType].renderSize()+cancellingStack.size()+cancelStack.size();
			pickedUpChip.setDest(mainStacks[pickedUpChip.chipType].getX(),
					mainStacks[pickedUpChip.chipType].getY(),destZ_);
		}
	}
	
	public void doPickedUpChipFlung() {
		float xPUC=pickedUpChip.x;
		float yPUC=pickedUpChip.getProjectedY();
		float left=mainStacks[ChipCase.CHIP_A].getX()+Chip.radiusX*0.3f;
		float right=mainStacks[ChipCase.CHIP_C].getX()-Chip.radiusX*0.3f;
		float bottom=mainStacks[ChipCase.CHIP_A].getY()+Chip.radiusY*0.3f;
		
		if (xPUC>left&&xPUC<right&&yPUC>bottom) {
			addBetChip(pickedUpChip);
			pickedUpChip=null;
		} else {
			doPickedUpChipDropped();
		}
	}
	
	public void setPickedUpChip(int chip_,float destX_,float destY_) {
		pickedUpChip=mainStacks[chip_].getLast();
		if (pickedUpChip.z>mainStacks[chip_].maxRenderNum) {
			pickedUpChip.z=mainStacks[chip_].maxRenderNum;
		}
		float destZ=pickedUpChip.z;
		int zBetStackTop=betStack.renderSize()+bettingStack.size();
		if (zBetStackTop>pickedUpChip.z) {
			destZ=zBetStackTop;
		}
		pickedUpChip.setDest(destX_,destY_,destZ);
		removeLastFromMainStack(chip_);
	}
	
	public void startOpenBet() {
		enableBet();
		if (bettingStack.size()==0&&betStack.size()==0) {
			enableCheck();
			enableFold();
		}
	}
	
	public void sendJoinToken(int[] chipNumbers) {
		this.chipNumbers=chipNumbers;
		sendingJoinToken=true;
	}
	
	public void toggleStackTotals() {
		showStackTotals=!showStackTotals;
	}
	
	public void stateChangeACKed() {
		mWL.game.mFL.stateChangeACKed();
		promptMove(stake,foldEnabled,mWL.game.mFL.playerPrompt.getText());
	}
	
	public void bellButtonPressed() {
		String hostName=mWL.game.mFL.tableStatusMenu.nudgeHostName;
		networkInterface.sendBell(hostName);
	}
	
	//////////////////// World to Player Messages ////////////////////
	public void notifyAtPlayerPosition() {
		mWL.game.mFL.notifyAtPlayerPosition();
		if (nameField.label.getText().equals("")) {
			mWL.sendCameraTo(mWL.camPosPlayersName);
		} else if (connectivityStatus==CONN_NONE) {
			connectivityStatus=CONN_IDLE;
			plaque.setTouchable(true);
			if (wifiEnabled) {
				notifyReadyToSearch();
			} else {
				wifiOff();
			}
		}
	}
	
	public void notifyLeftPlayerPosition() {
		mWL.game.mFL.notifyLeftPlayerPosition();
		mWL.game.mFL.stopWifiPrompt();
		dealerButton.opacity=0;
		connectivityStatus=CONN_NONE;
	}
	
	public void notifyAtNamePosition() {
		mWL.game.mFL.startEnterPlayerName();
		Gdx.input.setOnscreenKeyboardVisible(true);
		mWL.input.setTypingFocus(WorldInput.TYPING_PLAYER_NAME);
	}
	
	public void notifyLeftNamePosition() {
		mWL.game.mFL.stopEnterPlayerName();
		mWL.input.setTypingFocus(WorldInput.TYPING_NOTHING);
		Gdx.input.setOnscreenKeyboardVisible(false);
	}
	
	/** Notify the player to handle the back press
	 * @return return true if the camera may leave the area
	 */
	public boolean backPressed() {
		boolean playerFinished=true;
		if (connectivityStatus==CONN_NONE) {
			
		} else if (connectivityStatus==CONN_IDLE) {
			
		} else if (connectivityStatus==CONN_SEARCHING) {
			stopSearchForGames();
		} else if (connectivityStatus==CONN_SEARCH_HOLDOFF) {
			;
		} else if (connectivityStatus==CONN_CONNECTING) {
			playerFinished=false;
		} else if (connectivityStatus==CONN_CONNECTED) {
			doLeaveDialog();
			playerFinished=false;
		}
		return playerFinished;
	}
	
	public void notifyReadyToSearch() {
		// TODO deal with case where player zooms out at any time in the process
		if (connectivityStatus==CONN_IDLE||connectivityStatus==CONN_SEARCH_HOLDOFF) {
			connectivityStatus=CONN_SEARCHING;
			mWL.game.mFL.startSearchForGames();
			networkInterface.startRequestGames();
		}
	}
	
	public void searchHolddoff() {
		connectivityStatus=CONN_SEARCH_HOLDOFF;
		searchHoldoffTimer=0;
	}
	
	public int getConnectivityStatus() {
		return connectivityStatus;
	}
	
	public void stopSearchForGames() {
		connectivityStatus=CONN_IDLE;
		mWL.game.mFL.stopSearchForGames();
		networkInterface.stopRequestGames();
	}
	
	public void wifiOn() {
		wifiEnabled=true;
		if (connectivityStatus==CONN_IDLE) {
			mWL.game.mFL.stopWifiPrompt();
			notifyReadyToSearch();
		} else if (connectivityStatus==CONN_CONNECTED) {
			mWL.game.mFL.stopWifiPrompt();
			// TODO deal with the case during the game, later
		}
		// TODO deal with the other cases e.g. connecting and buyin
	}
	
	public void wifiOff() {
		wifiEnabled=false;
		if (connectivityStatus==CONN_IDLE) {
			mWL.game.mFL.startWifiPrompt();
		} else if (connectivityStatus==CONN_SEARCHING) {
			stopSearchForGames();
			mWL.game.mFL.startWifiPrompt();
		} else if (connectivityStatus==CONN_CONNECTED) {
			mWL.game.mFL.startWifiPrompt();
		}
		// TODO deal with the other cases e.g. connecting and buyin
	}
	
	//////////////////// Player to Table Messages ////////////////////
	public void appendName(char character) {
		if (character=='\b') {
			nameField.backspace();
		} else if (character=='\n') {
			nameDone();
		} else if ((int)(character)!=0) {
			nameField.append(""+character);
		}
		networkInterface.setName(nameField.getText());
	}
	
	private void submitBet() {
		int move;
		if (!isAllIn()) {
			move=GameLogic.MOVE_BET;
		} else {
			move=GameLogic.MOVE_ALL_IN;
		}
		networkInterface.submitMove(move,betStack.toString());
		betStack.clear(true);
		disableBet();
		disableCheck();
		disableFold();
		mWL.game.mFL.hideTextMessage();
		connectionBlob.fadeOut();
	}
	
	public void doCheck() {
		if (!waitingOnHost) {
			mWL.soundFX.checkSound.play();
			networkInterface.submitMove(GameLogic.MOVE_CHECK,"");
			disableBet();
			disableCheck();
			disableFold();
			connectionBlob.fadeOut();
			mWL.game.mFL.hideTextMessage();
		}
	}
	
	public void doFold() {
		if (!waitingOnHost) {
			mWL.soundFX.foldSound.play();
			networkInterface.submitMove(GameLogic.MOVE_FOLD,"");
			disableBet();
			disableCheck();
			disableFold();
			connectionBlob.fadeOut();
			mWL.game.mFL.hideTextMessage();
		}
	}
	
	public void doLeaveDialog() {
		mWL.game.mFL.startLeaveTableDialog(tableName);
	}
	
	public void leaveDialogDone(boolean actionCompleted) {
		mWL.game.mFL.stopLeaveTableDialog();
		if (actionCompleted) {
			leaveTable();
		}
	}
	
	public void leaveTable() {
		if (connectivityStatus==CONN_CONNECTED) {
			networkInterface.leaveTable();
			notifyTableDisconnected();
			searchHolddoff();
		}
	}
	
	//////////////////// Table to Player Messages ////////////////////
	public void notifyTableFound(DiscoveredTable table,boolean loadedGame) {
		if (connectivityStatus==CONN_SEARCHING) {
			connectivityStatus=CONN_BUYIN;
			connectingTable=table;
			stopSearchForGames();
			clearAllStacks();
			ChipCase.values=table.vals;
			joinToken.fadeIn();
			joinToken.setPosition(joinTokenStart);
			mWL.game.mFL.startBuyin(table.nameLabel.getText(),loadedGame);
		}
	}
	
	public void notifyConnectResult(boolean result,String tableName) {
		if (result) {
			connectivityStatus=CONN_CONNECTED;
			this.tableName=tableName;
			plaque.setTouchable(false);
		} else {
			// TODO notify player
			connectivityStatus=CONN_IDLE;
			searchHolddoff();
			mWL.game.mFL.stopBuyin();
		}
		connectingTable=null;
	}
	
	public void notifyConnectionLost() {
		Gdx.app.log("DPCLifecycle", "ThisPlayer - notifyConnectionLost()");
		waitingOnHost=true;
		cancelMoveState();
		mWL.game.mFL.startReconnect();
	}
	
	public void notifyReconnected() {
		Gdx.app.log("DPCLifecycle", "ThisPlayer - notifyReconnected()");
		waitingOnHost=false;
		mWL.game.mFL.stopReconnect();
	}
	
	public void syncStatusMenu(ArrayList<PlayerEntry> playerList) {
		mWL.game.mFL.tableStatusMenu.syncStatusMenu(playerList);
	}
	
	public void setupChips(ChipStack setupStack,int color) {
		clearAllStacks();
		mainStacks[ChipCase.CHIP_A].setOpacity(1);
		mainStacks[ChipCase.CHIP_B].setOpacity(1);
		mainStacks[ChipCase.CHIP_C].setOpacity(1);
		betStack.setOpacity(1);
		bettingStack.setOpacity(1);
		cancellingStack.setOpacity(1);
		cancelStack.setOpacity(1);
		doWin(setupStack);
		this.color=color;
		mWL.game.mFL.showTableStatusMenu(tableName);
		mWL.game.mFL.stopWaitNextHand();
	}
	
	public void setDealer(boolean isDealer) {
		this.isDealer=isDealer;
		if (isDealer) {
			dealerButton.opacity=1;
		}
	}
	
	public void notifyWaitNextHand() {
		mWL.game.mFL.startWaitNextHand();
	}
	
	public void promptMove(int betStake,boolean foldEnabled,String message) {
		if (foldEnabled) {
			enableFold();
		}
		if (betStake==0) {
			enableCheck();
			if (betStack.size()>0) {
				checkButton.setTouchable(false);
				checkButton.fadeOut();
			}
		}
		enableBet();
		stake=betStake;
		mWL.soundFX.bellSound.play();
		textMessage(message);
		connectionBlob.fadeIn();
	}
	
	public void promptStateChange(String messageStateChange,int stake,boolean foldEnabled,String message) {
		mWL.game.mFL.promptStateChange(messageStateChange);
		this.stake=stake;
		this.foldEnabled=foldEnabled;
		mWL.game.mFL.playerPrompt.setText(message);
	}
	
	public void cancelMove() {
		cancelMoveState();
	}
	
	public void doWin(final ChipStack winStack_) {
		int[] chipCount={0,0,0};
		for (int i=0;i<winStack_.size();i++) {
			winStack_.get(i).x=winStackOrigin.x;
			winStack_.get(i).y=winStackOrigin.y;
			winStack_.get(i).setDest(mainStacks[winStack_.get(i).chipType].getX(),
					mainStacks[winStack_.get(i).chipType].getY()+Chip.radiusY*2+
					(mainStacks[winStack_.get(i).chipType].renderSize()+
							chipCount[winStack_.get(i).chipType])*1,
					mainStacks[winStack_.get(i).chipType].renderSize()+chipCount[winStack_.get(i).chipType]);
			chipCount[winStack_.get(i).chipType]++;
			cancellingStack.add(winStack_.get(i));
		}
		if (pickedUpChip!=null) {
			float newZ_=mainStacks[pickedUpChip.chipType].renderSize()+cancellingStack.size();
			if (newZ_>pickedUpChip.z) {
				pickedUpChip.setDestZ(newZ_);
			}
		}
	}

	public void textMessage(String message) {
		if (message.equals("")) {
			mWL.game.mFL.hideTextMessage();
		} else {
			mWL.game.mFL.showTextMessage(message);
		}
	}
	
	public void doBell() {
		Gdx.input.vibrate(300);
		mWL.soundFX.bellSound.play();
	}
	
	public void notifyBootedByHost() {
		if (connectivityStatus==CONN_CONNECTED) {
			connectivityStatus=CONN_IDLE;
			notifyTableDisconnected();
			notifyReadyToSearch();
		}
	}

	public void enableNudge(String hostName) {
		mWL.game.mFL.tableStatusMenu.enableNudge(hostName);
	}
	
	public void disableNudge() {
		mWL.game.mFL.tableStatusMenu.disableNudge();
	}

	public void showConnection() {
		connectionBlob.fadeIn();
	}
	
	public void hideConnection() {
		connectionBlob.fadeOut();
	}
	
}
